pattern = '30-40%'
),
na.rm = TRUE
)
FourtyToFifty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '40-50%'
),
na.rm = TRUE
)
FiftyToSixty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '50-60%'
),
na.rm = TRUE
)
SixtyToSeventy <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '60-70%'
),
na.rm = TRUE
)
SeventyToEighty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '70-80%'
),
na.rm = TRUE
)
EightyToNinety <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '90-100%'
),
na.rm = TRUE
)
NinetyToHundred <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '0-10%'
),
na.rm = TRUE
)
AllTheValues <-
c(
ZeroToTen,
TenToTwenty,
TwentyToThirty,
ThirtyToFourty,
FourtyToFifty,
FiftyToSixty,
SixtyToSeventy,
SeventyToEighty,
EightyToNinety,
NinetyToHundred
)
theBiggestOne <- which.max(AllTheValues)
returnValue <- switch(
theBiggestOne,
'0-10%',
'10-20%',
'20-30%',
'30-40%',
'40-50%',
'50-60%',
'60-70%',
'70-80%',
'80-90%',
'90-100%'
)
return(returnValue)
}
# Return a list of the most common IMD values for A LIST OF regions
returnMostCommonIMDValuesForAListOfRegions <-
function(tableArg, regionsArg, numberOfRegionsArg) {
whatIsMostCommonOne = 0
for (x in 1:numberOfRegionsArg) {
currentRegion <-
filter(tableArg,
region_student_lived_in_while_taking_the_module == regionsArg[x])
whatIsMostCommonOne[x] <-
returnMostCommonIMDBandValue(currentRegion)
}
return(whatIsMostCommonOne)
}
# Get just the studentInfoTable with the columns of interest to us
subsetOfStudentInfoTable <-
select(
studentInfoTable,
student_id,
region_student_lived_in_while_taking_the_module,
index_of_multiple_deprivation_for_a_uk_region
)
# view(subsetOfStudentInfoTable)
# Get just the subsetOfStudentInfoTable with the regions that have missing values for the IMD value
whichRegionsHaveAMissingValue <-
subset(
subsetOfStudentInfoTable,
is.na(
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
)
)
# view(whichRegionsHaveAMissingValue)
# Get the names of the regions that have missing values for the IMD value
OULADDataChecker$setDataset(whichRegionsHaveAMissingValue)
OULADDataChecker$calculateWhatUniqueValuesWeHaveInAColumn(2)
whatAreTheNamesOfTheseRegions <-
OULADDataChecker$returnWhatUniqueValuesWeHaveInAColumn()
# Get the number of regions that have missing values for the IMD value
whatIsTheNumberOfTheseRegions = length(whatAreTheNamesOfTheseRegions[[1]])
# Get the common IMD value for regions that have missing values for the IMD value
mostCommonOnes <-
returnMostCommonIMDValuesForAListOfRegions(
subsetOfStudentInfoTable,
whatAreTheNamesOfTheseRegions[[1]],
whatIsTheNumberOfTheseRegions
)
names(mostCommonOnes) <- whatAreTheNamesOfTheseRegions[[1]]
# Replace missing IMD values with the name of the region
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region <-
ifelse(
is.na(
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
),
subsetOfStudentInfoTable$region_student_lived_in_while_taking_the_module,
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
)
# Replace the names of the region with the most common IMD value in that region
for (i in 1:nrow(subsetOfStudentInfoTable)) {
currentValue <-
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region[i]
if (currentValue %in% names(mostCommonOnes)) {
indexValue <- which(currentValue == names(mostCommonOnes))
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region[i] <-
mostCommonOnes[indexValue]
}
}
# Replacing NA values in our studentInfoTable with values in our subsetOfStudentInfoTable
# that now contain some IMD values we've come up with
studentInfoTable$index_of_multiple_deprivation_for_a_uk_region <-
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
# --
# -- Cleanup operations for the studentRegistrationTable in the OULAD database
# Clarify that if the date the student unregistered field is empty then this means that
# either the student is still in the course or has completed the course
studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day <-
replace(
studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day,
is.na(
studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day
),
"In/Completed course"
)
# Make it so if the day the student registered into the course is missing, it is on the day the course started
studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day <-
replace(
studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day,
is.na(
studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day
),
0
)
# --
# -- Data checking
# Checking for duplicate IDs for PKs
# Worked out PKs through looking at the tables
OULADDataChecker$setDataset(assessmentsTable)
OULADDataChecker$checkForDuplicateValues(3) # assessment_id
wereDuplicateAssessmentIDsFound <-
OULADDataChecker$returnIfDuplicateValuesWereFound()
OULADDataChecker$setDataset(VLETable)
OULADDataChecker$checkForDuplicateValues(1) # vle_material_id
wereDuplicateVLEMaterialIDsFound <-
OULADDataChecker$returnIfDuplicateValuesWereFound()
OULADDataChecker$calculateNumberOfMissingValues()
wereMissingValuesFound <-
OULADDataChecker$returnNumberOfMissingValues()
# courses table and student info table have duplicates, no PK in them
# --
# Drop columns with lots of missing values
OULADDataCleaner$setDataset(VLETable)
OULADDataCleaner$removeJunkColumns(c(5, 6))
VLETable <- OULADDataCleaner$returnDataset()
# --
# -- Merge a number of the tables together
# Wasn't able to merge VLETable and StudentVLETables - Wasn't finishing this operation in a reasonable time on one's laptop
# Merge student assessment table + assessments table
OULADDataSupersetter$setDataset(studentAssessmentTable)
OULADDataSupersetter$setSecondDataset(assessmentsTable)
mergedAssessmentTableAndStudentAssessmentTable <-
OULADDataSupersetter$mergeTwoTables("assessment_id")
# view(mergedAssessmentTableAndStudentAssessmentTable)
# Merge student assessment table + assessments + student registration table
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTable <-
merge(
x = mergedAssessmentTableAndStudentAssessmentTable,
y = studentRegistrationTable,
by.x = c("student_id", "module_id", "presentation_id"),
by.y = c("student_id", "module_id", "presentation_id")
)
# Merge student assessment table + assessments + student registration + student info table
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoTable <-
merge(
x = mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTable,
y = studentInfoTable,
by.x = c("student_id", "module_id", "presentation_id"),
by.y = c("student_id", "module_id", "presentation_id")
)
# Merge student assessment table + assessments + student registration + student info + courses table
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <-
merge(
x = mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoTable,
y = coursesTable,
by.x = c("module_id", "presentation_id"),
by.y = c("module_id", "presentation_id")
)
# --
# -- Cleanup operations for the mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable
# Handle missing exam due dates. The end of the last week of the course is the last day of the course.
# The start of the last week of the course would be days in course - 7
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable$assessment_days_since_the_module_began_due_date <-
ifelse(
is.na(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable$assessment_days_since_the_module_began_due_date
),
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable$module_days_it_goes_for,
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable$assessment_days_since_the_module_began_due_date
)
# --
# -- Data checking
# Check that at least one of student_id, assessment_id, presentation_id, and module_id in the same row is unique
# For testing purposes, I added a row that shares 4 IDs to see if my code would detect the duplicate row
# mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <- rbind(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable, list("AAA", "2013J", 704156, 1752, 18, "No", 67, "TMA", 20, 11, -18, "In/Completed course", "M", "Ireland", "HE Qualification", "90-100%", ">55",0, 120, "N", "Fail", 168))
# view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
# Return a list of rows that share 4 IDs
output <-
group_by(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
student_id,
assessment_id,
presentation_id,
module_id
) %>% filter(n() > 1)
numberOfRowsThatShare4IDS <- nrow(output)
# --
# -- Creation of a new column that determines the weighted score
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <-
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
mutate(weighted_score = ((student_score * assessment_weight) / 100),
.after = assessment_weight)
# --
# -- Creation of a new column that contains the difference between the due date and when the student handed in the assignment
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <-
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
mutate(
difference_between_due_date_and_hand_in_date = (
assessment_days_since_the_module_began_due_date - student_days_it_took_to_submit_assessment
),
.after = assessment_days_since_the_module_began_due_date
)
# --
newExamWeightValue = 0.4 # 40%
newWeightingOfAllOtherAssessmentsValue = 1 - newExamWeightValue
addColumnForNewWeightingOfAssessments <-
mutate(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
assessment_weight_exam_and_other_assessments_done = ifelse(
assessment_type == "Exam",
newExamWeightValue * assessment_weight,
newWeightingOfAllOtherAssessmentsValue * assessment_weight
),
.after = weighted_score
)
addColumnForNewWeightedScoresOfAssessments <-
addColumnForNewWeightingOfAssessments %>%
mutate(
weighted_score_exam_and_other_assessments_done = ((
student_score * assessment_weight_exam_and_other_assessments_done
) / 100
),
.after = assessment_weight_exam_and_other_assessments_done
)
expression <-
'SELECT
student_id,
module_id,
presentation_id,
number_of_credits_the_module_is_worth,
SUM(weighted_score) AS sum_weighted_score,
SUM(weighted_score_exam_and_other_assessments_done) AS sum_weighted_score_exam_and_other_assessments_done,
SUM(CASE WHEN assessment_type LIKE \'%Exam%\' THEN 1 ELSE 0 END) AS has_student_taken_an_exam,
case when student_final_result_for_the_module LIKE \'%Withdrawn%\' then \'No\' else \'Yes\' end did_student_finish_the_course
FROM
addColumnForNewWeightedScoresOfAssessments
GROUP BY student_id, module_id, presentation_id'
workOutTheSumOfTheWeightedScoresAndIfStudentHasTakenAnExamAndIfStudentHasFinishedTheCourse <-
sqldf(expression)
addAGradeColumnBasedOnTheNewAssessmentWeighting <-
workOutTheSumOfTheWeightedScoresAndIfStudentHasTakenAnExamAndIfStudentHasFinishedTheCourse %>%
mutate(grade = (
score = case_when(
did_student_finish_the_course == "No" ~ "WNF",
did_student_finish_the_course == "Yes" &
has_student_taken_an_exam > 0 ~ case_when(
sum_weighted_score_exam_and_other_assessments_done >= 85 ~ "HD",
sum_weighted_score_exam_and_other_assessments_done < 85 &
sum_weighted_score_exam_and_other_assessments_done > 74 ~ "D",
sum_weighted_score_exam_and_other_assessments_done < 75 &
sum_weighted_score_exam_and_other_assessments_done > 64 ~ "Cr",
sum_weighted_score_exam_and_other_assessments_done < 65 &
sum_weighted_score_exam_and_other_assessments_done > 49 ~ "P",
sum_weighted_score_exam_and_other_assessments_done <= 49 ~ "F"
),
did_student_finish_the_course == "Yes" &
has_student_taken_an_exam <= 0 ~ case_when(
sum_weighted_score >= 85 ~ "HD",
sum_weighted_score < 85 & sum_weighted_score > 74 ~ "D",
sum_weighted_score < 75 & sum_weighted_score > 64 ~ "Cr",
sum_weighted_score < 65 & sum_weighted_score > 49 ~ "P",
sum_weighted_score <= 49 ~ "F"
)
)
),
.after = did_student_finish_the_course)
addAGradeColumnBasedOnTheNewAssessmentWeighting$grade = factor(
addAGradeColumnBasedOnTheNewAssessmentWeighting$grade,
levels = c("WNF", "F", "P", "Cr", "D", "HD"),
ordered = TRUE
)
addNumericalEquivalentToGradeColumn <-
addAGradeColumnBasedOnTheNewAssessmentWeighting %>%
mutate(numerical_grade_equivalent = (
grade = case_when(
grade == "HD" ~ 7,
grade == "D" ~ 6,
grade == "Cr" ~ 5,
grade == "P" ~ 4,
grade == "F" ~ 1.5,
grade == "WF" ~ NA
)
),
.after = grade)
view(addNumericalEquivalentToGradeColumn)
addAGradeColumnBasedOnTheNewAssessmentWeighting <- addAGradeColumnBasedOnTheNewAssessmentWeighting %>%
mutate(group_ids_together = paste(module_id, presentation_id, sep = ", "), .after = presentation_id)
expression <-
'SELECT
student_id,
group_ids_together,
(numerical_grade_equivalent * number_of_credits_the_module_is_worth) AS grade_points,
SUM(number_of_credits_the_module_is_worth) AS course_credits
FROM
addNumericalEquivalentToGradeColumn
GROUP BY student_id, group_ids_together'
workOutTheGP <- sqldf(expression)
source("C:/Users/Certa/Desktop/projects/individual_project_r/code/oulad_dataset_code_part_1.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/code/oulad_dataset_code_part_2.R", echo=TRUE)
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = gender)) + scale_fill_manual(values=genderColors) + facet_wrap(~ gender) + geom_violin()
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = gender)) + scale_fill_manual(values=genderColors) + geom_violin()
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = gender)) + scale_fill_manual(values=genderColors) + geom_violin(position = "dodge")
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = gender)) + scale_fill_manual(values=genderColors) + geom_violin(position = "stacked")
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# -- Violin plot of if gender affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = gender)) + scale_fill_manual(values=genderColors) + geom_violin(position = "identity")
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = gender)) + scale_fill_manual(values=genderColors) + geom_violin(alpha = 0.3, position = "identity")
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = gender)) + scale_fill_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity")
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_has_a_disability)) + facet_wrap(~ student_has_a_disability) + geom_violin()
# --
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_has_a_disability))  + geom_violin(alpha = 0.5, position = "identity")
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_age)) + facet_wrap(~ student_age) + geom_violin()
# --
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_age)) + geom_violin(alpha = 0.5, position = "identity")
# -- Violin plot of if age affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_age)) + facet_wrap(~ student_age) + geom_violin()
# --
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = index_of_multiple_deprivation_for_a_uk_region)) + facet_grid(~ index_of_multiple_deprivation_for_a_uk_region) + geom_violin() +labs(fill="IMD band") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# --
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = index_of_multiple_deprivation_for_a_uk_region)) + facet_grid(~ index_of_multiple_deprivation_for_a_uk_region) + geom_violin() +labs(fill="IMD band") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# --
# -- Violin plot of if age affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_age)) + facet_wrap(~ student_age) + geom_violin()
# --
# -- Violin plot of if disability affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_has_a_disability))  + geom_violin(alpha = 0.5, position = "identity")
# --
# -- Violin plot of if disability affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = student_has_a_disability))  + geom_violin(alpha = 0.5, position = "identity")
# --
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = student_has_a_disability))  + geom_violin(alpha = 0.5, position = "identity") + theme_bw()
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = student_has_a_disability))  + geom_violin(alpha = 0.5, position = "identity") + theme_classic()
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = gender)) + scale_fill_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity")
# --
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = gender)) + scale_color_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity") + theme_classic()
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, fill = gender)) + scale_fill_manual(values=genderColors) + facet_wrap(~ gender) + geom_density() + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")
# --
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, fill = gender)) + scale_fill_manual(values=genderColors)  + geom_density(position = "identity") + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, fill = gender)) + scale_fill_manual(values=genderColors)  + geom_density(alpha = 0.5, position = "identity") + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, color = gender)) + scale_color_manual(values=genderColors)  + geom_density(alpha = 0.5, position = "identity") + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, color = gender)) + scale_color_manual(values=genderColors)  + geom_density(alpha = 0.5, position = "identity") + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")  + theme_classic()
# -- Density plot of if gender affects assessment hand in times
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, color = gender)) + scale_color_manual(values=genderColors)  + geom_density(alpha = 0.7, position = "identity") + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")  + theme_classic()
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, color = gender)) + scale_color_manual(values=genderColors)  + geom_density(alpha = 0.1, position = "identity") + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")  + theme_classic()
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, color = index_of_multiple_deprivation_for_a_uk_region))   + geom_density(alpha = 0.1, position = "identity") + theme_classic()
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, color = student_age))   + geom_density(alpha = 0.1, position = "identity") + theme_classic()
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, color = gender)) + scale_color_manual(values=genderColors)  + geom_density(alpha = 0.1, position = "identity") + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")  + theme_classic()
# -- Violin plot of if gender affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = gender)) + scale_color_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity") + theme_classic()
# --
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date, color = gender)) + scale_color_manual(values=genderColors)  + geom_density(alpha = 0.1, position = "identity") + labs(title = "Comparison between the sexes", subtitle = "Who hands in work faster", x = "Difference between the due date and hand in date")  + theme_classic()
# Found that what's depicted didn't change too much with age, disability, or IMD band
# --
# -- Violin plot of if gender affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = gender)) + scale_color_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity") + theme_classic()
# --
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = gender)) + scale_color_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity") + theme_classic(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) + labs(title = "Comparison between the sexes", subtitle = "Who scores better", y = "Student score")
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = gender)) + scale_color_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity") + theme_classic() + labs(title = "Comparison between the sexes", subtitle = "Who scores better", y = "Student score", x = NULL) + scale_x_discrete(labels = NULL, breaks = NULL)
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = index_of_multiple_deprivation_for_a_uk_region)) + facet_grid(~ index_of_multiple_deprivation_for_a_uk_region) + geom_violin() +labs(fill="IMD band") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = index_of_multiple_deprivation_for_a_uk_region)) + facet_grid(~ index_of_multiple_deprivation_for_a_uk_region) + geom_violin() +labs(fill="IMD band") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())  + labs(title = "Comparison between index of multiple deprivation bands", subtitle = "Does being disadvantaged affect student scores", y = "Student score", x = NULL)
# -- Violin plot of if age affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_age)) + facet_wrap(~ student_age) + geom_violin()
# --
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_age)) + facet_wrap(~ student_age) + geom_violin() + labs(title = "Comparison between the age groups", subtitle = "Who scores better", y = "Student scores", x = NULL) + scale_x_discrete(labels = NULL, breaks = NULL)
# --
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("grade", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
# --
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("grade", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades", fill = "Grades")
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
# --
# -- Bar plot of scores students received for each of the module + presentation combinations
colorsToUseForBars <- c("WNF" = "#2c345c", "F" = "#ef476f", P = "#f78104", "Cr" = "#faab36", "D" = "#a8e8f9", "HD" = "#39b89a")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[6]])
OULADDataVisualizer$calculateInvertedColors(6, colorsUsedForBars)
colorsToUseForLabels <- OULADDataVisualizer$returnColorsFound()
# numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations = 19
colorsToUseForLabels <- rep(colorsToUseForLabels, times = numberOfCombinations)
colorsToUseForLabels
colorsToUseForLabels <- c(colorsToUseForLabels, colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2])
colorsToUseForLabels
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
# --
# -- Bar plot of scores students received for each of the module + presentation combinations
colorsToUseForBars <- c("WNF" = "#13273e", "F" = "#ef476f", P = "#f78104", "Cr" = "#faab36", "D" = "#a8e8f9", "HD" = "#39b89a")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[6]])
OULADDataVisualizer$calculateInvertedColors(6, colorsUsedForBars)
colorsToUseForLabels <- OULADDataVisualizer$returnColorsFound()
# numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations = 19
colorsToUseForLabels <- rep(colorsToUseForLabels, times = numberOfCombinations)
colorsToUseForLabels
colorsToUseForLabels <- c(colorsToUseForLabels, colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2])
colorsToUseForLabels
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
# --
colorsToUseForBars <- c("WNF" = "#13273e", "F" = "#ef476f", P = "#f78104", "Cr" = "#faab36", "D" = "#a8e8f9", "HD" = "#39b89a")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[6]])
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
# --
# -- Bar plot of scores students received for each of the module + presentation combinations
colorsToUseForBars <- c("WNF" = "#7d6b6b", "F" = "#ef476f", P = "#f78104", "Cr" = "#faab36", "D" = "#a8e8f9", "HD" = "#39b89a")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[6]])
OULADDataVisualizer$calculateInvertedColors(6, colorsUsedForBars)
colorsToUseForLabels <- OULADDataVisualizer$returnColorsFound()
# numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations = 19
colorsToUseForLabels <- rep(colorsToUseForLabels, times = numberOfCombinations)
colorsToUseForLabels
colorsToUseForLabels <- c(colorsToUseForLabels, colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2])
colorsToUseForLabels
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
# --
# -- Student cumulative GPA bar chart
ggplot(studentCumulativeGPAsTable, aes(fill = factor(round(cumulative_gpa, 0)),
x=round(cumulative_gpa, 0))) +
geom_bar(stat="count", position = "stack") +
labs(title = "Student cumulative GPAs", fill = "GPA range", x = "Student GPAs") +
scale_x_continuous(breaks=0:7) + geom_text(stat='count', aes(label=paste(..count.., "\n", "(", round(((..count..)/sum(..count..))*100, 2), "%", ")" , sep = ""), vjust = "inward"))
# --
