# Addition of a new column that indicates what grade a student received for each assessment item
mongoDBDataset <- mongoDBDataset %>%
mutate(
grade = (score = case_when(
score >= 85 ~ "HD",
score < 85 & score > 74 ~ "D",
score < 75 & score > 64 ~ "Cr",
score < 65 & score > 49 ~ "P",
score <= 49 ~ "F")),
.after = score
)
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
# -- Linear modelling dataset
OULADDatasetQuerier$setQuery("
SELECT
student_id,
AVG(student_score) AS 'avg_student_score',
AVG(difference_between_due_date_and_hand_in_date) AS 'avg_student_quickness_at_handing_in_assignments',
student_has_a_disability,
index_of_multiple_deprivation_for_a_uk_region,
student_highest_education_level_on_entry_to_the_module,
did_student_finish_the_course,
gender
FROM
studentCourseAssessmentInfoTables
GROUP BY student_id")
getStudentInformationByItself <- OULADDatasetQuerier$returnQueryResultKeepColNames()
studentInfoTableForLinearModel <- merge(studentCumulativeGPAsTable, fixedUpMergedSubsetSums, by = "student_id")
studentInfoTableForLinearModel <- merge(studentInfoTableForLinearModel, getStudentInformationByItself, by = "student_id")
studentInfoTableForLinearModel <- na.omit(studentInfoTableForLinearModel)
# view(studentInfoTableForLinearModel)
# --
# -- Visualizing the correlation between the variables of the linear modelling dataset
studentInfoTableForLinearModel$gender <- factor(studentInfoTableForLinearModel$gender)
studentInfoTableForLinearModel$gender <- as.numeric(studentInfoTableForLinearModel$gender)
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module <- factor(
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module,
levels = c("No recognized qualifications", "Lower Than A Level", "A Level or Equivalent", "HE Qualification", "Post Graduate Qualification"),
ordered = TRUE
)
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module <- as.numeric(studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module)
studentInfoTableForLinearModel$student_has_a_disability <- factor(studentInfoTableForLinearModel$student_has_a_disability)
studentInfoTableForLinearModel$student_has_a_disability <- as.numeric(studentInfoTableForLinearModel$student_has_a_disability)
studentInfoTableForLinearModel$did_student_finish_the_course <- factor(studentInfoTableForLinearModel$did_student_finish_the_course)
studentInfoTableForLinearModel$did_student_finish_the_course <- as.numeric(studentInfoTableForLinearModel$did_student_finish_the_course)
unique(studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region)
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region <- factor(
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region,
levels = c("0-10%", "10-20%", "20-30%", "30-40%", "40-50%", "50-60%", "60-70%", "70-80%", "80-90%", "90-100%"),
ordered = TRUE
)
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region <- as.numeric(studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region)
correlationVariablesHaveWithGrades <- as.data.frame(round(cor(studentInfoTableForLinearModel)[,2], 1))
colnames(correlationVariablesHaveWithGrades) <- "Correlation to cumulative GPA"
# view(correlationVariablesHaveWithGrades)
exportVisualizeCorrelationBetweenCGPAAndOtherVariables <- ggcorrplot(correlationVariablesHaveWithGrades)
# -- Linear models
# -- Linear model 01 - GPA (Y) to average student score (x)
# Continuous predictor
linearModel01 <- lm(cumulative_gpa ~ avg_student_score, data = studentInfoTableForLinearModel)
summary(linearModel01)
