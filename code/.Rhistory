testingThis(colorsToUse[[1]])
testingThis = function(colorArg){
rgb.array <- col2rgb(colorArg)
print(rgb.array)
return(colorA)
}
complementaryColor <- testingThis(colorsToUse[[1]])
install.packages("colourvalues")
testingThis = function(colorArg){
rgb.array <- col2rgb(colorArg)
print(rgb.array)
redValue <- rgb.array[1]
greenValue <- rgb.array[2]
blueValue <- rgb.array[3]
invertedRedValue <- redValue *-1 + 255
invertedGreenValue <- greenValue *-1 + 255
invertedBlueValue <- blueValue *-1 + 255
oppositeRGBColor <- matrix(c(invertedRedValue, invertedGreenValue, invertedBlueValue))
return(oppositeColor)
}
complementaryColor <- testingThis(colorsToUse[[1]])
# development version
testingThis = function(colorArg){
rgb.array <- col2rgb(colorArg)
print(rgb.array)
redValue <- rgb.array[1]
greenValue <- rgb.array[2]
blueValue <- rgb.array[3]
invertedRedValue <- redValue *-1 + 255
invertedGreenValue <- greenValue *-1 + 255
invertedBlueValue <- blueValue *-1 + 255
oppositeRGBColor <- matrix(c(invertedRedValue, invertedGreenValue, invertedBlueValue))
print(oppositeRGBColor)
return(oppositeColor)
}
complementaryColor <- testingThis(colorsToUse[[1]])
testingThis = function(colorArg){
rgb.array <- col2rgb(colorArg)
print(rgb.array)
redValue <- rgb.array[1]
greenValue <- rgb.array[2]
blueValue <- rgb.array[3]
invertedRedValue <- redValue *-1 + 255
invertedGreenValue <- greenValue *-1 + 255
invertedBlueValue <- blueValue *-1 + 255
oppositeRGBColor <- matrix(c(invertedRedValue, invertedGreenValue, invertedBlueValue))
oppositeColor <- colourvalues::convert_colours(
matrix( as.numeric( unlist( strsplit(oppositeRGBColor, " ") ) ) , ncol = 3, byrow = T)
)
return(oppositeColor)
}
complementaryColor <- testingThis(colorsToUse[[1]])
library(colourvalues)
testingThis = function(colorArg){
rgb.array <- col2rgb(colorArg)
print(rgb.array)
redValue <- rgb.array[1]
greenValue <- rgb.array[2]
blueValue <- rgb.array[3]
invertedRedValue <- redValue *-1 + 255
invertedGreenValue <- greenValue *-1 + 255
invertedBlueValue <- blueValue *-1 + 255
oppositeRGBColor <- matrix(c(invertedRedValue, invertedGreenValue, invertedBlueValue))
oppositeColor <- colourvalues::convert_colours(oppositeRGBColor)
return(oppositeColor)
}
complementaryColor <- testingThis(colorsToUse[[1]])
testingThis = function(colorArg){
rgb.array <- col2rgb(colorArg)
print(rgb.array)
redValue <- rgb.array[1]
greenValue <- rgb.array[2]
blueValue <- rgb.array[3]
invertedRedValue <- redValue *-1 + 255
invertedGreenValue <- greenValue *-1 + 255
invertedBlueValue <- blueValue *-1 + 255
oppositeRGBColor <- matrix(c(invertedRedValue, invertedGreenValue, invertedBlueValue), ncol = 3)
oppositeColor <- convert_colour(oppositeRGBColor)
return(oppositeColor)
}
complementaryColor <- testingThis(colorsToUse[[1]])
complementaryColor
colorsToUseForLabels <- c(testingThis(colorsToUse[[1]]), testingThis(colorsToUse[[2]]), testingThis(colorsToUse[[3]]), testingThis(colorsToUse[[4]]), testingThis(colorsToUse[[5]]))
colorsToUseForLabels
ggplot(mongoDBDataset, aes(x = grade, fill = grade)) + scale_fill_manual("legend", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsToUseForLabels <- c(testingThis(colorsToUse[[1]]), testingThis(colorsToUse[[2]]), testingThis(colorsToUse[[3]]), testingThis(colorsToUse[[4]]), testingThis(colorsToUse[[5]]))
colorsToUseForLabels
ggplot(mongoDBDataset, aes(x = grade, fill = grade)) + scale_fill_manual("legend", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
colorsToUseForLabels
colorsToUseForBars[[1]]
colorsToUseForLabels[[1]]
colorsToUseForLabels[[1]]
nrow(colorsToUseForBars)
ncol(colorsToUseForBars)
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsToUseForBars
nrow(colorsToUseForBars)
nrow(colorsToUseForBars[[1]])
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
colorsToUseForLabels[[1]]
colorsToUseForLabels[[2]]
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
ggplot(mongoDBDataset, aes(x = grade, fill = grade)) + scale_fill_manual("legend", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(colour = "Possible grades")
ggplot(mongoDBDataset, aes(x = grade, fill = grade)) + scale_fill_manual("legend", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(colour = "Possible grades")
ggplot(mongoDBDataset, aes(x = grade, fill = grade)) + scale_fill_manual("legend", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(fill = "Possible grades")
ggplot(mongoDBDataset, aes(x = grade, fill = grade)) + scale_fill_manual("legend", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + guide_legend(title="my awesome title")
ggplot(mongoDBDataset, aes(x = grade, fill = grade)) + labs(fill = "Possible grades") + scale_fill_manual("legend", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("legend", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")  + guides(color=guide_legend(title="sale year"))
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Possible grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
subsetOfMongoDBDatasetForAFewClasses <- mongoDBDataset %>% filter(class_id %in% c(149, 350))
ggplot(subsetOfMongoDBDatasetForAFewClasses) + geom_bar(aes(x = grade, fill = grade)) + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count..), vjust = "inward")
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count.., color = colorsToUseForLabels), vjust = "inward")
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
MGDBColorFinder$calculateComplementaryColors(5, c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]]))
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
MGDBColorFinder$calculateComplementaryColors(10, c(colorsToUseForBars[[1]], c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[5]]))
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
MGDBColorFinder$calculateComplementaryColors(10, c(colorsToUseForBars[[1]], colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[5]]))
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
MGDBColorFinder$calculateComplementaryColors(5, c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]]))
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForLabels
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]])
MGDBColorFinder$calculateComplementaryColors(5, colorsUsedForBars)
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]])
MGDBColorFinder$calculateComplementaryColors(5, colorsUsedForBars)
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]])
MGDBColorFinder$calculateComplementaryColors(5, colorsUsedForBars)
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsUsedForBars
colorsToUseForLabels
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
subsetOfMongoDBDatasetForAFewClasses <- mongoDBDataset %>% filter(class_id %in% c(149, 350))
MGDBColorFinder$calculateComplementaryColors(5, c(colorsUsedForBars,colorsUsedForBars))
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForLabels
MGDBColorFinder$calculateComplementaryColors(5, c(colorsUsedForBars,colorsUsedForBars))
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
MGDBColorFinder$calculateComplementaryColors(10, c(colorsUsedForBars,colorsUsedForBars))
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="How students in the selected classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
subsetOfMongoDBDatasetForAFewClasses <- mongoDBDataset %>% filter(class_id %in% c(149, 350))
MGDBColorFinder$calculateComplementaryColors(10, c(colorsUsedForBars,colorsUsedForBars))
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(subsetOfMongoDBDatasetForAFewClasses, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade student received", y = "Count", title ="Comparing how students in two different classes fared") + facet_grid(. ~ class_id)  + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]])
MGDBColorFinder$calculateComplementaryColors(5, colorsUsedForBars)
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade students received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
mongoDBDataset$grade = factor(mongoDBDataset$grade, levels = c("F", "P", "Cr", "D", "HD"), ordered = TRUE)
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]])
MGDBColorFinder$calculateComplementaryColors(5, colorsUsedForBars)
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade students received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]])
MGDBColorFinder$calculateComplementaryColors(5, colorsUsedForBars)
colorsToUseForLabels <- MGDBColorFinder$returnColorsFound()
ggplot(mongoDBDataset, aes(x = grade, fill = grade))  + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + geom_bar() + labs( x = "Grade students received", y = "Count", title ="How students fared with the assessments") + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward")
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]])
colorsUsedForBars
colorsToUseForBars <- c("F" = "#440154", "P" = "#314473", "Cr" = "#1F8682", "D" = "#5DC863", "HD" = "#FDE725")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]])
colorsUsedForBars[1]
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
MGDBDataVisualizer$graphScatterPlotThatMakesUseOfTwoDatasets(
averageGradesForStudentsInSameClassesAsExceptionExceptException$class_id,
averageGradesForStudentsInSameClassesAsExceptionExceptException$average_score,
"darkgrey",
1,
averageGradesForAStudentAcrossAllOfTheirClasses$class_id,
averageGradesForAStudentAcrossAllOfTheirClasses$average_score,
"red",
1,
"class number",
"average scores of students",
"How well a student did",
"(Relative to others for all of their classes that have ever been done)",
0,
100,
class_averages$class_id,
class_averages$average_score,
"blue",
1,
class_q1$average_score,
class_q3$average_score,
"darkturquoise",
"green"
)
studentIDToLookFor <- 0
MGDBDataSubsetter$setQuery(paste(
"select DISTINCT(student_id), AVG(score), class_id
from mongoDBDataset
where student_id =",studentIDToLookFor, "
group by class_id;", sep =""))
averageGradesForAStudentAcrossAllOfTheirClasses <- MGDBDataSubsetter$returnQueryResult(c("student_id", "average_score", "class_id"))
# view(averageGradesForAStudentAcrossAllOfTheirClasses)
classesStudentWasIn <- MGDBDataCleaner$putVectorIntoASingleLineWithQuotationMarksBetweenEachTerm(averageGradesForAStudentAcrossAllOfTheirClasses$class_id)
MGDBDataSubsetter$setQuery(
paste(
"select DISTINCT(student_id), AVG(score), class_id
from mongoDBDataset
where student_id !=", studentIDToLookFor, " ", "AND class_id IN (",
classesStudentWasIn,
")
GROUP BY student_id;",
sep = ""
)
)
averageGradesForStudentsInSameClassesAsExceptionExceptException <- MGDBDataSubsetter$returnQueryResult(c("student_id", "average_score", "class_id"))
#view(averageGradesForStudentsInSameClassesAsExceptionExceptException)
averageGradesForStudentsInSameClassesAsExceptionIncludingException <- merge(x = averageGradesForAStudentAcrossAllOfTheirClasses, y = averageGradesForStudentsInSameClassesAsExceptionExceptException, all = TRUE)
# view(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateMeanOfGroup(3)
class_averages <- MGDBDataAnalyzer$returnMeanOfGroup()
#view(class_averages)
MGDBDataCleaner$setDataset(class_averages)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_averages <- MGDBDataCleaner$returnDataset()
#view(class_averages)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateQuartileValueOfGroup(3, 0.25)
class_q1 <- MGDBDataAnalyzer$returnQuartileValueOfGroup()
MGDBDataCleaner$setDataset(class_q1)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_q1 <- MGDBDataCleaner$returnDataset()
#view(class_q1)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateQuartileValueOfGroup(3, 0.75)
class_q3 <- MGDBDataAnalyzer$returnQuartileValueOfGroup()
MGDBDataCleaner$setDataset(class_q3)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_q3 <- MGDBDataCleaner$returnDataset()
#view(class_q3)
# -- Data visualization exports
MGDBDataVisualizer$setDataset(averageGradesForStudentsInSameClassesAsExceptionExceptException)
MGDBDataVisualizer$setSecondDataset(averageGradesForAStudentAcrossAllOfTheirClasses)
MGDBDataVisualizer$setThirdDataset(class_averages)
MGDBDataVisualizer$graphScatterPlotThatMakesUseOfTwoDatasets(
averageGradesForStudentsInSameClassesAsExceptionExceptException$class_id,
averageGradesForStudentsInSameClassesAsExceptionExceptException$average_score,
"darkgrey",
1,
averageGradesForAStudentAcrossAllOfTheirClasses$class_id,
averageGradesForAStudentAcrossAllOfTheirClasses$average_score,
"red",
1,
"class number",
"average scores of students",
"How well a student did",
"(Relative to others for all of their classes that have ever been done)",
0,
100,
class_averages$class_id,
class_averages$average_score,
"blue",
1,
class_q1$average_score,
class_q3$average_score,
"darkturquoise",
"green"
)
studentIDToLookFor <- 1
MGDBDataSubsetter$setQuery(paste(
"select DISTINCT(student_id), AVG(score), class_id
from mongoDBDataset
where student_id =",studentIDToLookFor, "
group by class_id;", sep =""))
averageGradesForAStudentAcrossAllOfTheirClasses <- MGDBDataSubsetter$returnQueryResult(c("student_id", "average_score", "class_id"))
# view(averageGradesForAStudentAcrossAllOfTheirClasses)
classesStudentWasIn <- MGDBDataCleaner$putVectorIntoASingleLineWithQuotationMarksBetweenEachTerm(averageGradesForAStudentAcrossAllOfTheirClasses$class_id)
MGDBDataSubsetter$setQuery(
paste(
"select DISTINCT(student_id), AVG(score), class_id
from mongoDBDataset
where student_id !=", studentIDToLookFor, " ", "AND class_id IN (",
classesStudentWasIn,
")
GROUP BY student_id;",
sep = ""
)
)
averageGradesForStudentsInSameClassesAsExceptionExceptException <- MGDBDataSubsetter$returnQueryResult(c("student_id", "average_score", "class_id"))
#view(averageGradesForStudentsInSameClassesAsExceptionExceptException)
averageGradesForStudentsInSameClassesAsExceptionIncludingException <- merge(x = averageGradesForAStudentAcrossAllOfTheirClasses, y = averageGradesForStudentsInSameClassesAsExceptionExceptException, all = TRUE)
# view(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateMeanOfGroup(3)
class_averages <- MGDBDataAnalyzer$returnMeanOfGroup()
#view(class_averages)
MGDBDataCleaner$setDataset(class_averages)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_averages <- MGDBDataCleaner$returnDataset()
#view(class_averages)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateQuartileValueOfGroup(3, 0.25)
class_q1 <- MGDBDataAnalyzer$returnQuartileValueOfGroup()
MGDBDataCleaner$setDataset(class_q1)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_q1 <- MGDBDataCleaner$returnDataset()
#view(class_q1)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateQuartileValueOfGroup(3, 0.75)
class_q3 <- MGDBDataAnalyzer$returnQuartileValueOfGroup()
MGDBDataCleaner$setDataset(class_q3)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_q3 <- MGDBDataCleaner$returnDataset()
#view(class_q3)
# -- Data visualization exports
MGDBDataVisualizer$setDataset(averageGradesForStudentsInSameClassesAsExceptionExceptException)
MGDBDataVisualizer$setSecondDataset(averageGradesForAStudentAcrossAllOfTheirClasses)
MGDBDataVisualizer$setThirdDataset(class_averages)
MGDBDataVisualizer$graphScatterPlotThatMakesUseOfTwoDatasets(
averageGradesForStudentsInSameClassesAsExceptionExceptException$class_id,
averageGradesForStudentsInSameClassesAsExceptionExceptException$average_score,
"darkgrey",
1,
averageGradesForAStudentAcrossAllOfTheirClasses$class_id,
averageGradesForAStudentAcrossAllOfTheirClasses$average_score,
"red",
1,
"class number",
"average scores of students",
"How well a student did",
"(Relative to others for all of their classes that have ever been done)",
0,
100,
class_averages$class_id,
class_averages$average_score,
"blue",
1,
class_q1$average_score,
class_q3$average_score,
"darkturquoise",
"green"
)
studentIDToLookFor <- 1
MGDBDataSubsetter$setQuery(paste(
"select DISTINCT(student_id), AVG(score), class_id
from mongoDBDataset
where student_id =",studentIDToLookFor, "
group by class_id;", sep =""))
averageGradesForAStudentAcrossAllOfTheirClasses <- MGDBDataSubsetter$returnQueryResult(c("student_id", "average_score", "class_id"))
# view(averageGradesForAStudentAcrossAllOfTheirClasses)
classesStudentWasIn <- MGDBDataCleaner$putVectorIntoASingleLineWithQuotationMarksBetweenEachTerm(averageGradesForAStudentAcrossAllOfTheirClasses$class_id)
MGDBDataSubsetter$setQuery(
paste(
"select DISTINCT(student_id), AVG(score), class_id
from mongoDBDataset
where student_id !=", studentIDToLookFor, " ", "AND class_id IN (",
classesStudentWasIn,
")
GROUP BY student_id;",
sep = ""
)
)
averageGradesForStudentsInSameClassesAsExceptionExceptException <- MGDBDataSubsetter$returnQueryResult(c("student_id", "average_score", "class_id"))
#view(averageGradesForStudentsInSameClassesAsExceptionExceptException)
averageGradesForStudentsInSameClassesAsExceptionIncludingException <- merge(x = averageGradesForAStudentAcrossAllOfTheirClasses, y = averageGradesForStudentsInSameClassesAsExceptionExceptException, all = TRUE)
# view(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateMeanOfGroup(3)
class_averages <- MGDBDataAnalyzer$returnMeanOfGroup()
#view(class_averages)
MGDBDataCleaner$setDataset(class_averages)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_averages <- MGDBDataCleaner$returnDataset()
#view(class_averages)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateQuartileValueOfGroup(3, 0.25)
class_q1 <- MGDBDataAnalyzer$returnQuartileValueOfGroup()
MGDBDataCleaner$setDataset(class_q1)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_q1 <- MGDBDataCleaner$returnDataset()
#view(class_q1)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateQuartileValueOfGroup(3, 0.75)
class_q3 <- MGDBDataAnalyzer$returnQuartileValueOfGroup()
MGDBDataCleaner$setDataset(class_q3)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_q3 <- MGDBDataCleaner$returnDataset()
#view(class_q3)
# -- Data visualization exports
MGDBDataVisualizer$setDataset(averageGradesForStudentsInSameClassesAsExceptionExceptException)
MGDBDataVisualizer$setSecondDataset(averageGradesForAStudentAcrossAllOfTheirClasses)
MGDBDataVisualizer$setThirdDataset(class_averages)
MGDBDataVisualizer$graphScatterPlotThatMakesUseOfTwoDatasets(
averageGradesForStudentsInSameClassesAsExceptionExceptException$class_id,
averageGradesForStudentsInSameClassesAsExceptionExceptException$average_score,
"darkgrey",
1,
averageGradesForAStudentAcrossAllOfTheirClasses$class_id,
averageGradesForAStudentAcrossAllOfTheirClasses$average_score,
"red",
1,
"class number",
"average scores of students",
"How well a student did",
"(Relative to others for all of their classes that have ever been done)",
0,
100,
class_averages$class_id,
class_averages$average_score,
"blue",
1,
class_q1$average_score,
class_q3$average_score,
"darkturquoise",
"green"
)
studentIDToLookFor <- 0
MGDBDataSubsetter$setQuery(paste(
"select DISTINCT(student_id), AVG(score), class_id
from mongoDBDataset
where student_id =",studentIDToLookFor, "
group by class_id;", sep =""))
averageGradesForAStudentAcrossAllOfTheirClasses <- MGDBDataSubsetter$returnQueryResult(c("student_id", "average_score", "class_id"))
# view(averageGradesForAStudentAcrossAllOfTheirClasses)
classesStudentWasIn <- MGDBDataCleaner$putVectorIntoASingleLineWithQuotationMarksBetweenEachTerm(averageGradesForAStudentAcrossAllOfTheirClasses$class_id)
MGDBDataSubsetter$setQuery(
paste(
"select DISTINCT(student_id), AVG(score), class_id
from mongoDBDataset
where student_id !=", studentIDToLookFor, " ", "AND class_id IN (",
classesStudentWasIn,
")
GROUP BY student_id;",
sep = ""
)
)
averageGradesForStudentsInSameClassesAsExceptionExceptException <- MGDBDataSubsetter$returnQueryResult(c("student_id", "average_score", "class_id"))
#view(averageGradesForStudentsInSameClassesAsExceptionExceptException)
averageGradesForStudentsInSameClassesAsExceptionIncludingException <- merge(x = averageGradesForAStudentAcrossAllOfTheirClasses, y = averageGradesForStudentsInSameClassesAsExceptionExceptException, all = TRUE)
# view(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateMeanOfGroup(3)
class_averages <- MGDBDataAnalyzer$returnMeanOfGroup()
#view(class_averages)
MGDBDataCleaner$setDataset(class_averages)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_averages <- MGDBDataCleaner$returnDataset()
#view(class_averages)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateQuartileValueOfGroup(3, 0.25)
class_q1 <- MGDBDataAnalyzer$returnQuartileValueOfGroup()
MGDBDataCleaner$setDataset(class_q1)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_q1 <- MGDBDataCleaner$returnDataset()
#view(class_q1)
MGDBDataAnalyzer$setDataset(averageGradesForStudentsInSameClassesAsExceptionIncludingException)
MGDBDataAnalyzer$calculateQuartileValueOfGroup(3, 0.75)
class_q3 <- MGDBDataAnalyzer$returnQuartileValueOfGroup()
MGDBDataCleaner$setDataset(class_q3)
MGDBDataCleaner$removeJunkColumns(c(1, 2)) # remove cols 1, 2
class_q3 <- MGDBDataCleaner$returnDataset()
#view(class_q3)
# -- Data visualization exports
MGDBDataVisualizer$setDataset(averageGradesForStudentsInSameClassesAsExceptionExceptException)
MGDBDataVisualizer$setSecondDataset(averageGradesForAStudentAcrossAllOfTheirClasses)
MGDBDataVisualizer$setThirdDataset(class_averages)
MGDBDataVisualizer$graphScatterPlotThatMakesUseOfTwoDatasets(
averageGradesForStudentsInSameClassesAsExceptionExceptException$class_id,
averageGradesForStudentsInSameClassesAsExceptionExceptException$average_score,
"darkgrey",
1,
averageGradesForAStudentAcrossAllOfTheirClasses$class_id,
averageGradesForAStudentAcrossAllOfTheirClasses$average_score,
"red",
1,
"class number",
"average scores of students",
"How well a student did",
"(Relative to others for all of their classes that have ever been done)",
0,
100,
class_averages$class_id,
class_averages$average_score,
"blue",
1,
class_q1$average_score,
class_q3$average_score,
"darkturquoise",
"green"
)
