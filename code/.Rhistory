# -- Linear model 08 & 09  - Categorical predictors
linearModel08 <- lm(cumulative_gpa ~
index_of_multiple_deprivation_for_a_uk_region +
student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel08)
linearModel09 <- lm(cumulative_gpa ~
index_of_multiple_deprivation_for_a_uk_region *
student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel09)
# Do both models + and *
# Visualizing these linear models
exportGPAToIMDBandAndHighestEducationLevelWithPlusOperator <- ggPredict(linearModel08,se=TRUE,interactive=TRUE)
exportGPAToIMDBandAndHighestEducationLevelWithTimesOperator <- ggPredict(linearModel09,se=TRUE,interactive=TRUE)
# --
# -- Storing information about our linear models
linearModelPerformance <- tibble(
linearModel = c(NA),
linearModelData = data.frame(
column = c("rmse", "adjusted r squared value", "p value", "number of outliers"),
columnValue = c(NA,NA,NA,NA)
)
)
view(linearModelPerformance)
# Setting the dataset all linear models work off of
OULADDataModeler$setDataset(studentInfoTableForLinearModel)
# Storing information about our first linear model
OULADDataModeler$setLinearModel(linearModel01)
linearModelPerformance[1] <- c(1)
OULADDataModeler$extractNumberOfOutliers()
linearModelPerformance$linearModelData$columnValue = c(OULADDataModeler$extractRootMeanSquareValue(), OULADDataModeler$extractAdjustedRSquaredValue(), OULADDataModeler$extractPValue(), OULADDataModeler$extractNumberOfOutliers())
# view(linearModelPerformance)
# Minimize code duplication with this function
addInformationFromAnotherLinearModel <- function (allLinearModelsData, theLinearModel, theLinearModelNumber){
OULADDataModeler$setLinearModel(theLinearModel)
linearModelData <- tibble(
linearModel = c(theLinearModelNumber),
linearModelData = data.frame(
column = c("rmse", "adjusted r squared value", "p value", "number of outliers"),
columnValue = c(OULADDataModeler$extractRootMeanSquareValue(), OULADDataModeler$extractAdjustedRSquaredValue(), OULADDataModeler$extractPValue(), OULADDataModeler$extractNumberOfOutliers())
)
)
allLinearModelsWithDataFromCurrentLinearModelAddedOn <- rbind(allLinearModelsData, linearModelData)
return(allLinearModelsWithDataFromCurrentLinearModelAddedOn)
}
# Storing information about our second to ninth linear models
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel02, 2)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel03, 3)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel04, 4)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel05, 5)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel06, 6)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel07, 7)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel08, 8)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel09, 9)
view(linearModelPerformance)
# -- Comparing our linear models
# comparingLinearModelPerformanceBarplot <-
ggplot(data = linearModelPerformance) +
geom_bar(aes(x = linearModelPerformance$linearModelData$column, y = linearModelPerformance$linearModelData$columnValue, fill = linearModelPerformance$linearModelData$column), color = "black", stat="identity") + facet_wrap(linearModelPerformance$linearModel) + labs(fill = "Measures of goodness of fit", title = "Comparing linear models", x = "Measure of goodness of fit", y = "Value")
# --
outliersFound <- car::outlierTest(linearModel02)
view(outliersFound)
outliersFound <- car::outlierTest(linearModel03)
view(outliersFound)
outliersFound <- car::outlierTest(linearModel01)
view(outliersFound)
outliersFound <- as_tibble(car::outlierTest(linearModel01))
outliersFound <- as_data_frame(car::outlierTest(linearModel01))
nrow(outliersFound[1])
nrow(outliersFound[[1]])
NROW(outliersFound[[1]])
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# -- Storing information about our linear models
linearModelPerformance <- tibble(
linearModel = c(NA),
linearModelData = data.frame(
column = c("rmse", "adjusted r squared value", "p value", "number of outliers"),
columnValue = c(NA,NA,NA,NA)
)
)
view(linearModelPerformance)
# Setting the dataset all linear models work off of
OULADDataModeler$setDataset(studentInfoTableForLinearModel)
# Storing information about our first linear model
OULADDataModeler$setLinearModel(linearModel01)
linearModelPerformance[1] <- c(1)
linearModelPerformance$linearModelData$columnValue = c(OULADDataModeler$extractRootMeanSquareValue(), OULADDataModeler$extractAdjustedRSquaredValue(), OULADDataModeler$extractPValue(), OULADDataModeler$extractNumberOfOutliers())
# view(linearModelPerformance)
# Minimize code duplication with this function
addInformationFromAnotherLinearModel <- function (allLinearModelsData, theLinearModel, theLinearModelNumber){
OULADDataModeler$setLinearModel(theLinearModel)
linearModelData <- tibble(
linearModel = c(theLinearModelNumber),
linearModelData = data.frame(
column = c("rmse", "adjusted r squared value", "p value", "number of outliers"),
columnValue = c(OULADDataModeler$extractRootMeanSquareValue(), OULADDataModeler$extractAdjustedRSquaredValue(), OULADDataModeler$extractPValue(), OULADDataModeler$extractNumberOfOutliers())
)
)
allLinearModelsWithDataFromCurrentLinearModelAddedOn <- rbind(allLinearModelsData, linearModelData)
return(allLinearModelsWithDataFromCurrentLinearModelAddedOn)
}
# Storing information about our second to ninth linear models
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel02, 2)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel03, 3)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel04, 4)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel05, 5)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel06, 6)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel07, 7)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel08, 8)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel09, 9)
view(linearModelPerformance)
# -- Comparing our linear models
# comparingLinearModelPerformanceBarplot <-
ggplot(data = linearModelPerformance) +
geom_bar(aes(x = linearModelPerformance$linearModelData$column, y = linearModelPerformance$linearModelData$columnValue, fill = linearModelPerformance$linearModelData$column), color = "black", stat="identity") + facet_wrap(linearModelPerformance$linearModel) + labs(fill = "Measures of goodness of fit", title = "Comparing linear models", x = "Measure of goodness of fit", y = "Value")
# --
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
# -- Linear modelling dataset
OULADDatasetQuerier$setQuery("
SELECT
student_id,
AVG(student_score) AS 'avg_student_score',
AVG(difference_between_due_date_and_hand_in_date) AS 'avg_student_quickness_at_handing_in_assignments',
student_has_a_disability,
index_of_multiple_deprivation_for_a_uk_region,
student_highest_education_level_on_entry_to_the_module,
did_student_finish_the_course,
gender
FROM
studentCourseAssessmentInfoTables
GROUP BY student_id")
getStudentInformationByItself <- OULADDatasetQuerier$returnQueryResultKeepColNames()
studentInfoTableForLinearModel <- merge(studentCumulativeGPAsTable, fixedUpMergedSubsetSums, by = "student_id")
studentInfoTableForLinearModel <- merge(studentInfoTableForLinearModel, getStudentInformationByItself, by = "student_id")
studentInfoTableForLinearModel <- na.omit(studentInfoTableForLinearModel)
# view(studentInfoTableForLinearModel)
# --
# -- Visualizing the correlation between the variables of the linear modelling dataset
studentInfoTableForLinearModel$gender <- factor(studentInfoTableForLinearModel$gender)
studentInfoTableForLinearModel$gender <- as.numeric(studentInfoTableForLinearModel$gender)
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module <- factor(
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module,
levels = c("No recognized qualifications", "Lower Than A Level", "A Level or Equivalent", "HE Qualification", "Post Graduate Qualification"),
ordered = TRUE
)
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module <- as.numeric(studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module)
studentInfoTableForLinearModel$student_has_a_disability <- factor(studentInfoTableForLinearModel$student_has_a_disability)
studentInfoTableForLinearModel$student_has_a_disability <- as.numeric(studentInfoTableForLinearModel$student_has_a_disability)
studentInfoTableForLinearModel$did_student_finish_the_course <- factor(studentInfoTableForLinearModel$did_student_finish_the_course)
studentInfoTableForLinearModel$did_student_finish_the_course <- as.numeric(studentInfoTableForLinearModel$did_student_finish_the_course)
unique(studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region)
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region <- factor(
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region,
levels = c("0-10%", "10-20%", "20-30%", "30-40%", "40-50%", "50-60%", "60-70%", "70-80%", "80-90%", "90-100%"),
ordered = TRUE
)
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region <- as.numeric(studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region)
correlationVariablesHaveWithGrades <- as.data.frame(round(cor(studentInfoTableForLinearModel)[,2], 1))
colnames(correlationVariablesHaveWithGrades) <- "Correlation to cumulative GPA"
# view(correlationVariablesHaveWithGrades)
exportVisualizeCorrelationBetweenCGPAAndOtherVariables <- ggcorrplot(correlationVariablesHaveWithGrades)
# -- Linear models
# -- Linear model 01 - GPA (Y) to average student score (x)
# Continuous predictor
linearModel01 <- lm(cumulative_gpa ~ avg_student_score, data = studentInfoTableForLinearModel)
summary(linearModel01)
# Create a dataframe that I'll use to make a prediction line
linearModel01PredictionsAndResiduals <- studentInfoTableForLinearModel %>%
data_grid(avg_student_score, cumulative_gpa)  %>%
add_predictions(linearModel01) %>%
add_residuals(linearModel01)
# view(linearModel01PredictionsAndResiduals)
# Plot the data, linear regression line, prediction line
exportGPAToAverageStudentScoreLM <- ggplot(studentInfoTableForLinearModel, aes(x = cumulative_gpa, y = avg_student_score)) + geom_point() +  geom_smooth(color = "turquoise", method="lm") + labs(title = "GPA plotted against average score", x = "Cumulative GPA of students", y = "Average score of students") + geom_line(data = linearModel01PredictionsAndResiduals, mapping = aes(x = pred, y = avg_student_score), color = "red", alpha = 0.8)  + theme_minimal()
# --
# -- Linear model 02  - GPA (Y) to student_highest_education_level_on_entry_to_the_module (x)
linearModel02 <- lm(cumulative_gpa ~  student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel02)
predicted_cgpa_values_for_linear_model_02 <- predict(linearModel02)
studentInfoTableForLinearModel["predicted_cgpa_from_highest_education_level_on_entry_to_the_module"] <- predicted_cgpa_values_for_linear_model_02
studentInfoTableForLinearModel <- studentInfoTableForLinearModel %>% relocate(predicted_cgpa_from_highest_education_level_on_entry_to_the_module, .after = cumulative_gpa)
# Plot the data, linear regression line, prediction line
# plotted this prediction line without using a data grid
exportGPAToHighestEducationLevelOnEntryToTheModuleLM <- ggplot(studentInfoTableForLinearModel, aes(x = cumulative_gpa, y = student_highest_education_level_on_entry_to_the_module)) + geom_point() +  geom_smooth(color = "turquoise", method="lm") + labs(title = "GPA plotted against student education level on entry to the module", x = "Cumulative GPA of students", y = "Student highest education level") + theme_minimal() + geom_line(mapping = aes(x = predicted_cgpa_from_highest_education_level_on_entry_to_the_module), color = "red", alpha = 0.8)
# --
# -- Linear model 03 - GPA (Y) to total VLE interaction times (x)
# Continuous predictor
linearModel03 <- lm(cumulative_gpa ~ sum_vle_interaction_times, data = studentInfoTableForLinearModel)
summary(linearModel03)
predicted_cgpa_values_for_linear_model_03 <- predict(linearModel03)
studentInfoTableForLinearModel["predicted_cgpa_from_sum_vle_interaction_times"] <- predicted_cgpa_values_for_linear_model_03
studentInfoTableForLinearModel <- studentInfoTableForLinearModel %>% relocate(predicted_cgpa_from_sum_vle_interaction_times, .after = cumulative_gpa)
# Plot the data, linear regression line, prediction line
# plotted this prediction line without using a data grid
exportGPAToVLEInteractionTimesLM <- ggplot(studentInfoTableForLinearModel, aes(x = cumulative_gpa, y = sum_vle_interaction_times)) + geom_point() +  geom_smooth(color = "turquoise", method="lm") + labs(title = "GPA plotted against use of learning material", x = "Cumulative GPA of students", y = "Times clicked the learning material") + theme_minimal() + geom_line(mapping = aes(x = predicted_cgpa_from_sum_vle_interaction_times), color = "red", alpha = 0.8)
# --
# -- Linear model 04 & 05 - GPA (Y) to total VLE interaction times (x1) as well as IMD band (x2)
# Continuous predictor
linearModel04 <- lm(cumulative_gpa ~ sum_vle_interaction_times + index_of_multiple_deprivation_for_a_uk_region, data = studentInfoTableForLinearModel)
summary(linearModel04)
linearModel05 <- lm(cumulative_gpa ~ sum_vle_interaction_times * index_of_multiple_deprivation_for_a_uk_region, data = studentInfoTableForLinearModel)
summary(linearModel05)
# Visualizing these linear models
exportGPAToVLEInteractionTimesAndIMDBandLMWithPlusOperator <- ggPredict(linearModel04,se=TRUE,interactive=TRUE)
exportGPAToVLEInteractionTimesAndIMDBandLMWithTimesOperator <- ggPredict(linearModel05,se=TRUE,interactive=TRUE)
# --
# -- Linear model 06 & 07  - Continuous predictors
linearModel06 <- lm(cumulative_gpa ~
sum_vle_interaction_times +
avg_student_quickness_at_handing_in_assignments, data = studentInfoTableForLinearModel)
summary(linearModel06)
linearModel07 <- lm(cumulative_gpa ~
sum_vle_interaction_times *
avg_student_quickness_at_handing_in_assignments, data = studentInfoTableForLinearModel)
summary(linearModel07)
# Visualizing these linear models
exportGPAToVLEInteractionTimesAndStudentQuicknessInHandingInAssignmentsWithPlusOperator <- ggPredict(linearModel06,se=TRUE,interactive=TRUE)
exportGPAToVLEInteractionTimesAndStudentQuicknessInHandingInAssignmentsWithTimesOperator <- ggPredict(linearModel07,se=TRUE,interactive=TRUE)
# --
# -- Linear model 08 & 09  - Categorical predictors
linearModel08 <- lm(cumulative_gpa ~
index_of_multiple_deprivation_for_a_uk_region +
student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel08)
linearModel09 <- lm(cumulative_gpa ~
index_of_multiple_deprivation_for_a_uk_region *
student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel09)
# Do both models + and *
# Visualizing these linear models
exportGPAToIMDBandAndHighestEducationLevelWithPlusOperator <- ggPredict(linearModel08,se=TRUE,interactive=TRUE)
exportGPAToIMDBandAndHighestEducationLevelWithTimesOperator <- ggPredict(linearModel09,se=TRUE,interactive=TRUE)
# --
# -- Storing information about our linear models
linearModelPerformance <- tibble(
linearModel = c(NA),
linearModelData = data.frame(
column = c("rmse", "adjusted r squared value", "p value", "number of outliers"),
columnValue = c(NA,NA,NA,NA)
)
)
view(linearModelPerformance)
# Setting the dataset all linear models work off of
OULADDataModeler$setDataset(studentInfoTableForLinearModel)
# Storing information about our first linear model
OULADDataModeler$setLinearModel(linearModel01)
linearModelPerformance[1] <- c(1)
linearModelPerformance$linearModelData$columnValue = c(OULADDataModeler$extractRootMeanSquareValue(), OULADDataModeler$extractAdjustedRSquaredValue(), OULADDataModeler$extractPValue(), OULADDataModeler$extractNumberOfOutliers())
# view(linearModelPerformance)
# Minimize code duplication with this function
addInformationFromAnotherLinearModel <- function (allLinearModelsData, theLinearModel, theLinearModelNumber){
OULADDataModeler$setLinearModel(theLinearModel)
linearModelData <- tibble(
linearModel = c(theLinearModelNumber),
linearModelData = data.frame(
column = c("rmse", "adjusted r squared value", "p value", "number of outliers"),
columnValue = c(OULADDataModeler$extractRootMeanSquareValue(), OULADDataModeler$extractAdjustedRSquaredValue(), OULADDataModeler$extractPValue(), OULADDataModeler$extractNumberOfOutliers())
)
)
allLinearModelsWithDataFromCurrentLinearModelAddedOn <- rbind(allLinearModelsData, linearModelData)
return(allLinearModelsWithDataFromCurrentLinearModelAddedOn)
}
# Storing information about our second to ninth linear models
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel02, 2)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel03, 3)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel04, 4)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel05, 5)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel06, 6)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel07, 7)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel08, 8)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel09, 9)
view(linearModelPerformance)
# -- Comparing our linear models
# comparingLinearModelPerformanceBarplot <-
ggplot(data = linearModelPerformance) +
geom_bar(aes(x = linearModelPerformance$linearModelData$column, y = linearModelPerformance$linearModelData$columnValue, fill = linearModelPerformance$linearModelData$column), color = "black", stat="identity") + facet_wrap(linearModelPerformance$linearModel) + labs(fill = "Measures of goodness of fit", title = "Comparing linear models", x = "Measure of goodness of fit", y = "Value")
# --
# -- Linear model 06 & 07  - Continuous predictors
linearModel06 <- lm(cumulative_gpa ~
sum_vle_interaction_times +
avg_student_quickness_at_handing_in_assignments, data = studentInfoTableForLinearModel)
summary(linearModel06)
linearModel07 <- lm(cumulative_gpa ~
sum_vle_interaction_times *
avg_student_quickness_at_handing_in_assignments, data = studentInfoTableForLinearModel)
summary(linearModel07)
# Visualizing these linear models
exportGPAToVLEInteractionTimesAndStudentQuicknessInHandingInAssignmentsWithPlusOperator <- ggPredict(linearModel06,se=TRUE,interactive=TRUE)
exportGPAToVLEInteractionTimesAndStudentQuicknessInHandingInAssignmentsWithTimesOperator <- ggPredict(linearModel07,se=TRUE,interactive=TRUE)
# --
# -- Linear model 08 & 09  - Categorical predictors
linearModel08 <- lm(cumulative_gpa ~
index_of_multiple_deprivation_for_a_uk_region +
student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel08)
linearModel09 <- lm(cumulative_gpa ~
index_of_multiple_deprivation_for_a_uk_region *
student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel09)
# Do both models + and *
# Visualizing these linear models
exportGPAToIMDBandAndHighestEducationLevelWithPlusOperator <- ggPredict(linearModel08,se=TRUE,interactive=TRUE)
exportGPAToIMDBandAndHighestEducationLevelWithTimesOperator <- ggPredict(linearModel09,se=TRUE,interactive=TRUE)
# --
# -- Storing information about our linear models
linearModelPerformance <- tibble(
linearModel = c(NA),
linearModelData = data.frame(
column = c("rmse", "adjusted r^2 value", "p value", "num. of outliers"),
columnValue = c(NA,NA,NA,NA)
)
)
view(linearModelPerformance)
# Setting the dataset all linear models work off of
OULADDataModeler$setDataset(studentInfoTableForLinearModel)
# Storing information about our first linear model
OULADDataModeler$setLinearModel(linearModel01)
linearModelPerformance[1] <- c(1)
linearModelPerformance$linearModelData$columnValue = c(OULADDataModeler$extractRootMeanSquareValue(), OULADDataModeler$extractAdjustedRSquaredValue(), OULADDataModeler$extractPValue(), OULADDataModeler$extractNumberOfOutliers())
# view(linearModelPerformance)
# Minimize code duplication with this function
addInformationFromAnotherLinearModel <- function (allLinearModelsData, theLinearModel, theLinearModelNumber){
OULADDataModeler$setLinearModel(theLinearModel)
linearModelData <- tibble(
linearModel = c(theLinearModelNumber),
linearModelData = data.frame(
column = c("rmse", "adjusted r^2 value", "p value", "num. of outliers"),
columnValue = c(OULADDataModeler$extractRootMeanSquareValue(), OULADDataModeler$extractAdjustedRSquaredValue(), OULADDataModeler$extractPValue(), OULADDataModeler$extractNumberOfOutliers())
)
)
allLinearModelsWithDataFromCurrentLinearModelAddedOn <- rbind(allLinearModelsData, linearModelData)
return(allLinearModelsWithDataFromCurrentLinearModelAddedOn)
}
# Storing information about our second to ninth linear models
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel02, 2)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel03, 3)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel04, 4)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel05, 5)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel06, 6)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel07, 7)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel08, 8)
linearModelPerformance <- addInformationFromAnotherLinearModel(linearModelPerformance, linearModel09, 9)
# view(linearModelPerformance)
# -- Comparing our linear models
# comparingLinearModelPerformanceBarplot <-
ggplot(data = linearModelPerformance) +
geom_bar(aes(x = linearModelPerformance$linearModelData$column, y = linearModelPerformance$linearModelData$columnValue, fill = linearModelPerformance$linearModelData$column), color = "black", stat="identity") + facet_wrap(linearModelPerformance$linearModel) + labs(fill = "Measures of goodness of fit", title = "Comparing linear models", x = "Measure of goodness of fit", y = "Value")
# --
fstat<-summary(linearModel01)$fstatistic
pValue <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
fstat<-summary(linearModel01)$fstatistic
pValue <- pf(fstat[1], fstat[2], fstat[3], lower.tail=FALSE)
pValue
summary(linearModel01)
summary(linearModel02)
summary(linearModel03)
summary(linearModel04)
summary(linearModel05)
summary(linearModel06)
return(allLinearModelsWithDataFromCurrentLinearModelAddedOn)
summary(linearModel07)
summary(linearModel08)
view(car::outlierTest(linearModel03))
view(car::outlierTest(linearModel04))
view(car::outlierTest(linearModel05))
view(car::outlierTest(linearModel06))
view(car::outlierTest(linearModel08))
view(car::outlierTest(linearModel09))
view(car::outlierTest(linearModel02))
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
# -- Linear modelling dataset
OULADDatasetQuerier$setQuery("
SELECT
student_id,
AVG(student_score) AS 'avg_student_score',
AVG(difference_between_due_date_and_hand_in_date) AS 'avg_student_quickness_at_handing_in_assignments',
student_has_a_disability,
index_of_multiple_deprivation_for_a_uk_region,
student_highest_education_level_on_entry_to_the_module,
did_student_finish_the_course,
gender
FROM
studentCourseAssessmentInfoTables
GROUP BY student_id")
getStudentInformationByItself <- OULADDatasetQuerier$returnQueryResultKeepColNames()
studentInfoTableForLinearModel <- merge(studentCumulativeGPAsTable, fixedUpMergedSubsetSums, by = "student_id")
studentInfoTableForLinearModel <- merge(studentInfoTableForLinearModel, getStudentInformationByItself, by = "student_id")
studentInfoTableForLinearModel <- na.omit(studentInfoTableForLinearModel)
# view(studentInfoTableForLinearModel)
# --
# -- Visualizing the correlation between the variables of the linear modelling dataset
studentInfoTableForLinearModel$gender <- factor(studentInfoTableForLinearModel$gender)
studentInfoTableForLinearModel$gender <- as.numeric(studentInfoTableForLinearModel$gender)
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module <- factor(
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module,
levels = c("No recognized qualifications", "Lower Than A Level", "A Level or Equivalent", "HE Qualification", "Post Graduate Qualification"),
ordered = TRUE
)
studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module <- as.numeric(studentInfoTableForLinearModel$student_highest_education_level_on_entry_to_the_module)
studentInfoTableForLinearModel$student_has_a_disability <- factor(studentInfoTableForLinearModel$student_has_a_disability)
studentInfoTableForLinearModel$student_has_a_disability <- as.numeric(studentInfoTableForLinearModel$student_has_a_disability)
studentInfoTableForLinearModel$did_student_finish_the_course <- factor(studentInfoTableForLinearModel$did_student_finish_the_course)
studentInfoTableForLinearModel$did_student_finish_the_course <- as.numeric(studentInfoTableForLinearModel$did_student_finish_the_course)
unique(studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region)
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region <- factor(
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region,
levels = c("0-10%", "10-20%", "20-30%", "30-40%", "40-50%", "50-60%", "60-70%", "70-80%", "80-90%", "90-100%"),
ordered = TRUE
)
studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region <- as.numeric(studentInfoTableForLinearModel$index_of_multiple_deprivation_for_a_uk_region)
correlationVariablesHaveWithGrades <- as.data.frame(round(cor(studentInfoTableForLinearModel)[,2], 1))
colnames(correlationVariablesHaveWithGrades) <- "Correlation to cumulative GPA"
# view(correlationVariablesHaveWithGrades)
exportVisualizeCorrelationBetweenCGPAAndOtherVariables <- ggcorrplot(correlationVariablesHaveWithGrades)
# -- Linear models
# -- Linear model 01 - GPA (Y) to average student score (x)
# Continuous predictor
linearModel01 <- lm(cumulative_gpa ~ avg_student_score, data = studentInfoTableForLinearModel)
summary(linearModel01)
# Create a dataframe that I'll use to make a prediction line
linearModel01PredictionsAndResiduals <- studentInfoTableForLinearModel %>%
data_grid(avg_student_score, cumulative_gpa)  %>%
add_predictions(linearModel01) %>%
add_residuals(linearModel01)
# view(linearModel01PredictionsAndResiduals)
# Plot the data, linear regression line, prediction line
exportGPAToAverageStudentScoreLM <- ggplot(studentInfoTableForLinearModel, aes(x = cumulative_gpa, y = avg_student_score)) + geom_point() +  geom_smooth(color = "turquoise", method="lm") + labs(title = "GPA plotted against average score", x = "Cumulative GPA of students", y = "Average score of students") + geom_line(data = linearModel01PredictionsAndResiduals, mapping = aes(x = pred, y = avg_student_score), color = "red", alpha = 0.8)  + theme_minimal()
# --
# -- Linear model 02  - GPA (Y) to student_highest_education_level_on_entry_to_the_module (x)
linearModel02 <- lm(cumulative_gpa ~  student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel02)
predicted_cgpa_values_for_linear_model_02 <- predict(linearModel02)
studentInfoTableForLinearModel["predicted_cgpa_from_highest_education_level_on_entry_to_the_module"] <- predicted_cgpa_values_for_linear_model_02
studentInfoTableForLinearModel <- studentInfoTableForLinearModel %>% relocate(predicted_cgpa_from_highest_education_level_on_entry_to_the_module, .after = cumulative_gpa)
# Plot the data, linear regression line, prediction line
# plotted this prediction line without using a data grid
exportGPAToHighestEducationLevelOnEntryToTheModuleLM <- ggplot(studentInfoTableForLinearModel, aes(x = cumulative_gpa, y = student_highest_education_level_on_entry_to_the_module)) + geom_point() +  geom_smooth(color = "turquoise", method="lm") + labs(title = "GPA plotted against student education level on entry to the module", x = "Cumulative GPA of students", y = "Student highest education level") + theme_minimal() + geom_line(mapping = aes(x = predicted_cgpa_from_highest_education_level_on_entry_to_the_module), color = "red", alpha = 0.8)
# --
# -- Linear model 03 - GPA (Y) to total VLE interaction times (x)
# Continuous predictor
linearModel03 <- lm(cumulative_gpa ~ sum_vle_interaction_times, data = studentInfoTableForLinearModel)
summary(linearModel03)
predicted_cgpa_values_for_linear_model_03 <- predict(linearModel03)
studentInfoTableForLinearModel["predicted_cgpa_from_sum_vle_interaction_times"] <- predicted_cgpa_values_for_linear_model_03
studentInfoTableForLinearModel <- studentInfoTableForLinearModel %>% relocate(predicted_cgpa_from_sum_vle_interaction_times, .after = cumulative_gpa)
# Plot the data, linear regression line, prediction line
# plotted this prediction line without using a data grid
exportGPAToVLEInteractionTimesLM <- ggplot(studentInfoTableForLinearModel, aes(x = cumulative_gpa, y = sum_vle_interaction_times)) + geom_point() +  geom_smooth(color = "turquoise", method="lm") + labs(title = "GPA plotted against use of learning material", x = "Cumulative GPA of students", y = "Times clicked the learning material") + theme_minimal() + geom_line(mapping = aes(x = predicted_cgpa_from_sum_vle_interaction_times), color = "red", alpha = 0.8)
# --
# -- Linear model 04 & 05 - GPA (Y) to total VLE interaction times (x1) as well as IMD band (x2)
# Continuous predictor
linearModel04 <- lm(cumulative_gpa ~ sum_vle_interaction_times + index_of_multiple_deprivation_for_a_uk_region, data = studentInfoTableForLinearModel)
summary(linearModel04)
linearModel05 <- lm(cumulative_gpa ~ sum_vle_interaction_times * index_of_multiple_deprivation_for_a_uk_region, data = studentInfoTableForLinearModel)
summary(linearModel05)
# Visualizing these linear models
exportGPAToVLEInteractionTimesAndIMDBandLMWithPlusOperator <- ggPredict(linearModel04,se=TRUE,interactive=TRUE)
exportGPAToVLEInteractionTimesAndIMDBandLMWithTimesOperator <- ggPredict(linearModel05,se=TRUE,interactive=TRUE)
# --
# -- Linear model 06 & 07  - Continuous predictors
linearModel06 <- lm(cumulative_gpa ~
sum_vle_interaction_times +
avg_student_quickness_at_handing_in_assignments, data = studentInfoTableForLinearModel)
summary(linearModel06)
linearModel07 <- lm(cumulative_gpa ~
sum_vle_interaction_times *
avg_student_quickness_at_handing_in_assignments, data = studentInfoTableForLinearModel)
summary(linearModel07)
# Visualizing these linear models
exportGPAToVLEInteractionTimesAndStudentQuicknessInHandingInAssignmentsWithPlusOperator <- ggPredict(linearModel06,se=TRUE,interactive=TRUE)
exportGPAToVLEInteractionTimesAndStudentQuicknessInHandingInAssignmentsWithTimesOperator <- ggPredict(linearModel07,se=TRUE,interactive=TRUE)
# --
# -- Linear model 08 & 09  - Categorical predictors
linearModel08 <- lm(cumulative_gpa ~
index_of_multiple_deprivation_for_a_uk_region +
student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel08)
linearModel09 <- lm(cumulative_gpa ~
index_of_multiple_deprivation_for_a_uk_region *
student_highest_education_level_on_entry_to_the_module, data = studentInfoTableForLinearModel)
summary(linearModel09)
# Do both models + and *
# Visualizing these linear models
exportGPAToIMDBandAndHighestEducationLevelWithPlusOperator <- ggPredict(linearModel08,se=TRUE,interactive=TRUE)
exportGPAToIMDBandAndHighestEducationLevelWithTimesOperator <- ggPredict(linearModel09,se=TRUE,interactive=TRUE)
