),
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable$module_days_it_goes_for,
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable$assessment_days_since_the_module_began_due_date
)
# --
# -- Data checking
# Check that at least one of student_id, assessment_id, presentation_id, and module_id in the same row is unique
# For testing purposes, I added a row that shares 4 IDs to see if my code would detect the duplicate row
# mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <- rbind(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable, list("AAA", "2013J", 704156, 1752, 18, "No", 67, "TMA", 20, 11, -18, "In/Completed course", "M", "Ireland", "HE Qualification", "90-100%", ">55",0, 120, "N", "Fail", 168))
# Return a list of rows that share 4 IDs
output <-
group_by(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
student_id,
assessment_id,
presentation_id,
module_id
) %>% filter(n() > 1)
numberOfRowsThatShare4IDS <- nrow(output)
# --
# -- Work out whether the original weighted value even adds up to 100
expression <-
"SELECT
module_id,
presentation_id,
student_id,
SUM(assessment_weight) AS 'sum_assessment_weight',
CASE
WHEN SUM(assessment_weight) != 0 THEN (100 / SUM(assessment_weight))
END 'non_zero_weighting_sum_scale_assessment_weightings_by_this_value',
CASE
WHEN SUM(assessment_weight) == 0 THEN COUNT(assessment_weight)
END 'zero_weighting_sum_number_of_assessments_hundred_divide_by_this_value_for_each_assessment'
FROM
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable
WHERE
assessment_type NOT LIKE '%Exam%'
GROUP BY
module_id,
presentation_id,
student_id"
checkingAssessmentWeights <- sqldf(expression)
# -- Putting this alongside the original table
mergingAndFixing <- merge(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
checkingAssessmentWeights, by = c("module_id","presentation_id", "student_id"),all = T)
# view(mergingAndFixing)
expression <-
"SELECT
module_id,
presentation_id,
student_id,
assessment_id,
student_score,
assessment_type,
assessment_weight,
sum_assessment_weight,
non_zero_weighting_sum_scale_assessment_weightings_by_this_value,
zero_weighting_sum_number_of_assessments_hundred_divide_by_this_value_for_each_assessment
FROM
mergingAndFixing"
checkingThisOut <- sqldf(expression)
# view(checkingThisOut)
# --
# -- Creation of a new column that determines the weighted score
hopingThisWorks <-
checkingThisOut %>%
mutate(new_assessment_weight = (
sum_assessment_weight = case_when(
assessment_type != "Exam" & sum_assessment_weight == 0 ~ 100 / zero_weighting_sum_number_of_assessments_hundred_divide_by_this_value_for_each_assessment,
assessment_type != "Exam" & sum_assessment_weight != 0 ~ assessment_weight * non_zero_weighting_sum_scale_assessment_weightings_by_this_value,
assessment_type == "Exam" ~ assessment_weight
)
),
.after = assessment_weight)
# --
hopingThisWorks <- arrange(hopingThisWorks, student_id)
# view(hopingThisWorks)
# -- Replacing the assessment_weight column with our new calculations for it....
# huh <- anti_join(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable, hopingThisWorks)
# view(huh)
# -- Removing junk columns
OULADDataCleaner$setDataset(hopingThisWorks)
OULADDataCleaner$removeJunkColumns(c(5,6,7,9,10,11))
hopingThisWorks <- OULADDataCleaner$returnDataset()
# view(hopingThisWorks)
# -- Merging, it's right now
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <- merge(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
hopingThisWorks,
by = c("module_id","presentation_id", "student_id", "assessment_id"),all = T)
# view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
# This was wrong or it at least put it in the wrong order!
#mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <- arrange(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable, student_id)
#mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable$new_assessment_weight <- hopingThisWorks$new_assessment_weight
#view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
# --
# ---
# Changed from here onwards
# assessment_weight -> new_assessment_weight
# ---
# -- Creation of a new column that determines the weighted score
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <-
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
mutate(weighted_score = ((student_score * new_assessment_weight) / 100),
.after = new_assessment_weight)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
# --
# -- Creation of a new column that contains the difference between the due date and when the student handed in the assignment
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <-
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
mutate(
difference_between_due_date_and_hand_in_date = (
assessment_days_since_the_module_began_due_date - student_days_it_took_to_submit_assessment
),
.after = assessment_days_since_the_module_began_due_date
)
# --
# -- Set how much the exam and other assessment items weigh so they add up to 100%
# For the case where the student does an exam as well as other assessments in a module
# This will make working out the cumulative GPA possible
newExamWeightValue = 0.4 # Exam weighed at 40% for example
newWeightingOfAllOtherAssessmentsValue = 1 - newExamWeightValue # Other assessments weighed at 60% for example
# -- Creation of a new column for the new weight of every assessment type
# For the case where the student does an exam as well as other assessments in a module
addColumnForNewWeightingOfAssessments <-
mutate(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
assessment_weight_exam_and_other_assessments_done = ifelse(
assessment_type == "Exam",
newExamWeightValue * new_assessment_weight,
newWeightingOfAllOtherAssessmentsValue * new_assessment_weight
),
.after = weighted_score
)
# view(addColumnForNewWeightingOfAssessments)
# --
# -- Creation of a new column for the new weighted score based on the new weight for every assessment type
# For the case where the student does an exam as well as other assessments in a module
addColumnForNewWeightedScoresOfAssessments <-
addColumnForNewWeightingOfAssessments %>%
mutate(
weighted_score_exam_and_other_assessments_done = ((
student_score * assessment_weight_exam_and_other_assessments_done
) / 100
),
.after = assessment_weight_exam_and_other_assessments_done
)
# view(addColumnForNewWeightedScoresOfAssessments)
# --
# -- Calculation and creation of a new column for
# - The sum of the weighted scores for each module
# - If student has finished the course
# - If student has taken an exam
expression <-
'SELECT
student_id,
module_id,
presentation_id,
number_of_credits_the_module_is_worth,
SUM(weighted_score)
AS sum_weighted_score,
SUM(weighted_score_exam_and_other_assessments_done)
AS sum_weighted_score_exam_and_other_assessments_done,
SUM(CASE WHEN assessment_type LIKE \'%Exam%\' THEN 1 ELSE 0 END)
AS has_student_taken_an_exam,
case when student_final_result_for_the_module LIKE \'%Withdrawn%\' then \'No\'
else \'Yes\' end did_student_finish_the_course
FROM
addColumnForNewWeightedScoresOfAssessments
GROUP BY student_id, module_id, presentation_id'
workOutTheSumOfTheWeightedScoresAndIfStudentHasTakenAnExamAndIfStudentHasFinishedTheCourse <-
sqldf(expression)
view(workOutTheSumOfTheWeightedScoresAndIfStudentHasTakenAnExamAndIfStudentHasFinishedTheCourse)
# -- Creation of a new column for the grade a student gets
# - Considering if they withdrew from the course or not
# - Considering if they took an exam or not
addAGradeColumnBasedOnTheNewAssessmentWeighting <-
workOutTheSumOfTheWeightedScoresAndIfStudentHasTakenAnExamAndIfStudentHasFinishedTheCourse %>%
mutate(grade = (
score = case_when(
did_student_finish_the_course == "No" ~ "WNF",
did_student_finish_the_course == "Yes" &
has_student_taken_an_exam > 0 ~ case_when(
sum_weighted_score_exam_and_other_assessments_done >= 85 ~ "HD",
sum_weighted_score_exam_and_other_assessments_done < 85 &
sum_weighted_score_exam_and_other_assessments_done > 74 ~ "D",
sum_weighted_score_exam_and_other_assessments_done < 75 &
sum_weighted_score_exam_and_other_assessments_done > 64 ~ "Cr",
sum_weighted_score_exam_and_other_assessments_done < 65 &
sum_weighted_score_exam_and_other_assessments_done > 49 ~ "P",
sum_weighted_score_exam_and_other_assessments_done <= 49 ~ "F"
),
did_student_finish_the_course == "Yes" &
has_student_taken_an_exam <= 0 ~ case_when(
sum_weighted_score >= 85 ~ "HD",
sum_weighted_score < 85 & sum_weighted_score > 74 ~ "D",
sum_weighted_score < 75 & sum_weighted_score > 64 ~ "Cr",
sum_weighted_score < 65 & sum_weighted_score > 49 ~ "P",
sum_weighted_score <= 49 ~ "F"
)
)
),
.after = did_student_finish_the_course)
# --
view(addAGradeColumnBasedOnTheNewAssessmentWeighting)
# -- Creation of a new column that groups the module ID with the presentation ID
addAGradeColumnBasedOnTheNewAssessmentWeighting <- addAGradeColumnBasedOnTheNewAssessmentWeighting %>%
mutate(group_ids_together = paste(module_id, presentation_id, sep = ", "), .after = presentation_id)
# --
# -- Creation of a new column that converts the grade to it's numerical equivalent
addNumericalEquivalentToGradeColumn <-
addAGradeColumnBasedOnTheNewAssessmentWeighting %>%
mutate(numerical_grade_equivalent = (
grade = case_when(
grade == "HD" ~ 7,
grade == "D" ~ 6,
grade == "Cr" ~ 5,
grade == "P" ~ 4,
grade == "F" ~ 1.5,
grade == "WF" ~ NA
)
),
.after = grade)
# --
# -- Creation of a new column that works out the grade points
expression <-
'SELECT
student_id,
group_ids_together,
(numerical_grade_equivalent * number_of_credits_the_module_is_worth)
AS grade_points,
SUM(number_of_credits_the_module_is_worth)
AS course_credits
FROM
addNumericalEquivalentToGradeColumn
GROUP BY student_id, group_ids_together'
workOutTheGP <- sqldf(expression)
# --
# -- Creation of the new column that works out the cumulative GPA
expression <-
'SELECT
student_id,
ROUND(SUM(grade_points) / SUM(course_credits), 2)
AS cumulative_gpa
FROM
workOutTheGP
GROUP BY student_id'
workOutTheCGPA <- sqldf(expression)
# --
# -- Merging of the OG table with the new grades that student got for the module
subsetOfAddAGradeColumnBasedOnTheNewAssessmentWeighting <- addAGradeColumnBasedOnTheNewAssessmentWeighting
OULADDataCleaner$setDataset(subsetOfAddAGradeColumnBasedOnTheNewAssessmentWeighting)
OULADDataCleaner$removeJunkColumns(c(4,5,6,7))
subsetOfAddAGradeColumnBasedOnTheNewAssessmentWeighting <- OULADDataCleaner$returnDataset()
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <-
left_join(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
subsetOfAddAGradeColumnBasedOnTheNewAssessmentWeighting,
by = join_by(
"student_id" == "student_id",
"module_id" == "module_id",
"presentation_id" == "presentation_id"
)
)
# --
# -- Prepare a mini-table for exporting
studentModulePresentationGradeTable <- addAGradeColumnBasedOnTheNewAssessmentWeighting
OULADDataCleaner$setDataset(studentModulePresentationGradeTable)
OULADDataCleaner$removeJunkColumns(c(2, 3, 5, 6, 7, 8, 9))
studentModulePresentationGradeTable <- OULADDataCleaner$returnDataset()
# --
# -- Add a new column to the table
studentVLETable$master_id <- seq.int(nrow(studentVLETable))
studentVLETable <- studentVLETable %>%
select(master_id, everything())
# --
# -- Splitting this stupidly large table with 10655280 lines into eight parts
sprintf("Number of lines in full data set: %s", nrow(studentVLETable))
firstSplitExpression <- "
SELECT *
FROM studentVLETable
WHERE master_id BETWEEN 1 AND 1331910"
secondSplitExpression <- "
SELECT *
FROM studentVLETable
WHERE master_id BETWEEN 1331911 AND 2663821"
thirdSplitExpression <- "
SELECT *
FROM studentVLETable
WHERE master_id BETWEEN 2663822 AND 3995732"
fourthSplitExpression <- "
SELECT *
FROM studentVLETable
WHERE master_id BETWEEN 3995733 AND 5327643"
fifthSplitExpression <- "
SELECT *
FROM studentVLETable
WHERE master_id BETWEEN 5327644 AND 6659554"
sixthSplitExpression <- "
SELECT *
FROM studentVLETable
WHERE master_id BETWEEN 6659555 AND 7991465"
seventhSplitExpression <- "
SELECT *
FROM studentVLETable
WHERE master_id BETWEEN 7991466 AND 9323376"
eighthSplitExpression <- "
SELECT *
FROM studentVLETable
WHERE master_id BETWEEN 9323377 AND 10655280"
firstSubsetOfStudentVLETTable <- sqldf(firstSplitExpression)
secondSubsetOfStudentVLETTable <- sqldf(secondSplitExpression)
thirdSubsetOfStudentVLETTable <- sqldf(thirdSplitExpression)
fourthSubsetOfStudentVLETTable <- sqldf(fourthSplitExpression)
fifthSubsetOfStudentVLETTable <- sqldf(fifthSplitExpression)
sixthSubsetOfStudentVLETTable <- sqldf(sixthSplitExpression)
seventhSubsetOfStudentVLETTable <- sqldf(seventhSplitExpression)
eighthSubsetOfStudentVLETTable <- sqldf(eighthSplitExpression)
# --
# -- Write these new files to CSV files
OULADDataExporter$setDataset(studentModulePresentationGradeTable)
OULADDataExporter$writeToCsvFile("studentModulePresentationGradeTable.csv")
OULADDataExporter$setDataset(workOutTheCGPA)
OULADDataExporter$writeToCsvFile("studentCumulativeGPAsTable.csv")
OULADDataExporter$setDataset(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable
)
OULADDataExporter$writeToCsvFile("studentCourseAssessmentInfoTables.csv")
OULADDataExporter$setDataset(studentVLETable)
OULADDataExporter$writeToCsvFile("studentVLETable.csv")
OULADDataExporter$setDataset(firstSubsetOfStudentVLETTable)
OULADDataExporter$writeToCsvFile("studentVLETableSubset1.csv")
OULADDataExporter$setDataset(secondSubsetOfStudentVLETTable)
OULADDataExporter$writeToCsvFile("studentVLETableSubset2.csv")
OULADDataExporter$setDataset(thirdSubsetOfStudentVLETTable)
OULADDataExporter$writeToCsvFile("studentVLETableSubset3.csv")
OULADDataExporter$setDataset(fourthSubsetOfStudentVLETTable)
OULADDataExporter$writeToCsvFile("studentVLETableSubset4.csv")
OULADDataExporter$setDataset(fifthSubsetOfStudentVLETTable)
OULADDataExporter$writeToCsvFile("studentVLETableSubset5.csv")
OULADDataExporter$setDataset(sixthSubsetOfStudentVLETTable)
OULADDataExporter$writeToCsvFile("studentVLETableSubset6.csv")
OULADDataExporter$setDataset(seventhSubsetOfStudentVLETTable)
OULADDataExporter$writeToCsvFile("studentVLETableSubset7.csv")
OULADDataExporter$setDataset(eighthSubsetOfStudentVLETTable)
OULADDataExporter$writeToCsvFile("studentVLETableSubset8.csv")
OULADDataExporter$setDataset(VLETable)
OULADDataExporter$writeToCsvFile("VLETable.csv")
# --
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
getStudentInformationByItselfExpression <- "
SELECT
student_id,
AVG(student_score) AS 'avg_student_score',
AVG(difference_between_due_date_and_hand_in_date) AS 'avg_student_quickness_at_handing_in_assignments',
student_has_a_disability,
index_of_multiple_deprivation_for_a_uk_region,
student_highest_education_level_on_entry_to_the_module
FROM
studentCourseAssessmentInfoTables
GROUP BY student_id"
getStudentInformationByItself <- sqldf(getStudentInformationByItselfExpression)
studentInfoTableForLinearModel <- merge(studentCumulativeGPAsTable, fixedUpMergedSubsetSums, by = "student_id")
studentInfoTableForLinearModel <- merge(studentInfoTableForLinearModel, getStudentInformationByItself, by = "student_id")
studentInfoTableForLinearModel <- na.omit(studentInfoTableForLinearModel)
view(studentInfoTableForLinearModel)
# Linear models
plot(x = studentInfoTableForLinearModel$cumulative_gpa, y = studentInfoTableForLinearModel$avg_student_score, main = "GPA plotted against average score", xlab = "Cumulative GPA of students", ylab = "Average score of students")
view(studentCumulativeGPAsTable)
view(studentModulePresentationGradeTable)
plot(x = studentInfoTableForLinearModel$cumulative_gpa, y = studentInfoTableForLinearModel$avg_student_score, main = "GPA plotted against average score", xlab = "Cumulative GPA of students", ylab = "Average score of students")
view(studentModulePresentationGradeTable)
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
view(studentModulePresentationGradeTable)
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
view(studentModulePresentationGradeTable)
# -- Violin plot of if gender affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = gender)) + scale_color_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity") + theme_classic() + labs(title = "Comparison between the sexes", subtitle = "Who scores better", y = "Student scores", x = NULL, color = "Gender of student") + scale_x_discrete(labels = NULL, breaks = NULL)
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
# -- Density plot of assessment hand in times
ggplot(studentCourseAssessmentInfoTables,
aes(x = difference_between_due_date_and_hand_in_date)) + geom_density(alpha = 0.1, position = "identity") + labs(title = "Seeing when most students hand in their work", x = "Difference between the due date and hand in date")  + theme_classic()
# Found that what's depicted didn't change too much with age, disability, gender, or IMD band
# --
# Get number of enrolled students, modules, number of students that withdraw vs don't, ...
genderColors <- c("pink", "royalblue")
# -- Violin plot of if gender affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = gender)) + scale_color_manual(values=genderColors) + geom_violin(alpha = 0.5, position = "identity") + theme_classic() + labs(title = "Comparison between the sexes", subtitle = "Who scores better", y = "Student scores", x = NULL, color = "Gender of student") + scale_x_discrete(labels = NULL, breaks = NULL)
# --
# -- Violin plot of if disability affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, color = student_has_a_disability))  + geom_violin(alpha = 0.5, position = "identity") + theme_classic() + labs(title = "Comparison between the disabled and abled", subtitle = "Who scores better", y = "Student scores", x = NULL, color = "Student is disabled") + scale_x_discrete(labels = NULL, breaks = NULL)
# --
# -- Violin plot of if age affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = student_age)) + facet_wrap(~ student_age) + geom_violin() + labs(title = "Comparison between the age groups", subtitle = "Who scores better", y = "Student scores", x = NULL) + scale_x_discrete(labels = NULL, breaks = NULL)
# --
# -- Violin plot of if the IMD band affects student scores
ggplot(studentCourseAssessmentInfoTables, aes(x = assessment_id, y = student_score, fill = index_of_multiple_deprivation_for_a_uk_region)) + facet_grid(~ index_of_multiple_deprivation_for_a_uk_region) + geom_violin() +labs(fill="IMD band") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())  + labs(title = "Comparison between index of multiple deprivation bands", subtitle = "Does being disadvantaged affect student scores", y = "Student scores", x = NULL)
# --
# -- Bar plot of scores students received for each of the module + presentation combinations
colorsToUseForBars <- c("WNF" = "#7d6b6b", "F" = "#ef476f", P = "#f78104", "Cr" = "#faab36", "D" = "#a8e8f9", "HD" = "#39b89a")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[6]])
OULADDataVisualizer$calculateInvertedColors(6, colorsUsedForBars)
colorsToUseForLabels <- OULADDataVisualizer$returnColorsFound()
# numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations = 19
colorsToUseForLabels <- rep(colorsToUseForLabels, times = numberOfCombinations)
colorsToUseForLabels
colorsToUseForLabels <- c(colorsToUseForLabels, colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2])
colorsToUseForLabels
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
# -- Bar plot of scores students received for each of the module + presentation combinations
colorsToUseForBars <- c("WNF" = "#7d6b6b", "F" = "#ef476f", P = "#f78104", "Cr" = "#faab36", "D" = "#a8e8f9", "HD" = "#39b89a")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[6]])
OULADDataVisualizer$calculateInvertedColors(6, colorsUsedForBars)
colorsToUseForLabels <- OULADDataVisualizer$returnColorsFound()
# numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations = 19
colorsToUseForLabels <- rep(colorsToUseForLabels, times = numberOfCombinations)
colorsToUseForLabels
colorsToUseForLabels <- c(colorsToUseForLabels, colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2])
colorsToUseForLabels
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
# -- Student cumulative GPA bar chart
ggplot(studentCumulativeGPAsTable, aes(fill = factor(round(cumulative_gpa, 0)),
x=round(cumulative_gpa, 0))) +
geom_bar(stat="count", position = "stack") +
labs(title = "Student cumulative GPAs", fill = "GPA range", x = "Student GPAs") +
scale_x_continuous(breaks=0:7) + geom_text(stat='count', aes(label=paste(..count.., "\n", "(", round(((..count..)/sum(..count..))*100, 2), "%", ")" , sep = ""), vjust = "inward"))
# --
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
colorsToUseForBars <- c("WNF" = "#7d6b6b", "F" = "#ef476f", P = "#f78104", "Cr" = "#faab36", "D" = "#a8e8f9", "HD" = "#39b89a")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[6]])
OULADDataVisualizer$calculateInvertedColors(6, colorsUsedForBars)
colorsToUseForLabels <- OULADDataVisualizer$returnColorsFound()
# numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations = 19
colorsToUseForLabels <- rep(colorsToUseForLabels, times = numberOfCombinations)
colorsToUseForLabels
colorsToUseForLabels <- c(colorsToUseForLabels, colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2], colorsToUseForLabels[1], colorsToUseForLabels[2])
colorsToUseForLabels
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
colorsToUseForLabels
numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations
colorsToUseForBars <- c("WNF" = "#7d6b6b", "F" = "#ef476f", P = "#f78104", "Cr" = "#faab36", "D" = "#a8e8f9", "HD" = "#39b89a")
colorsUsedForBars <- c(colorsToUseForBars[[1]], colorsToUseForBars[[2]], colorsToUseForBars[[3]], colorsToUseForBars[[4]], colorsToUseForBars[[5]], colorsToUseForBars[[6]])
OULADDataVisualizer$calculateInvertedColors(6, colorsUsedForBars)
colorsToUseForLabels <- OULADDataVisualizer$returnColorsFound()
numberOfCombinations = n_distinct(studentModulePresentationGradeTable$group_ids_together)
numberOfCombinations
colorsToUseForLabels <- rep(colorsToUseForLabels, times = numberOfCombinations)
colorsToUseForLabels
ggplot(studentModulePresentationGradeTable, aes(x = grade, fill = grade)) + scale_fill_manual("Grades", values = c(colorsToUseForBars)) + facet_wrap(~ group_ids_together) + geom_bar() + geom_text(stat='count', aes(label=..count..), color = colorsToUseForLabels, vjust = "inward") + labs(title = "Student results", subtitle = "For each module & presentation", y = "Count", x = "Student grades")
