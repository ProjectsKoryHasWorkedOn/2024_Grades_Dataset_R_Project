# --
# -- Creation of a new column that converts the grade to it's numerical equivalent
addNumericalEquivalentToGradeColumn <-
addAGradeColumnBasedOnTheNewAssessmentWeighting %>%
mutate(numerical_grade_equivalent = (
grade = case_when(
grade == "HD" ~ 7,
grade == "D" ~ 6,
grade == "Cr" ~ 5,
grade == "P" ~ 4,
grade == "F" ~ 1.5,
grade == "WF" ~ NA
)
),
.after = grade)
# --
# -- Creation of a new column that works out the grade points
expression <-
'SELECT
student_id,
group_ids_together,
(numerical_grade_equivalent * number_of_credits_the_module_is_worth)
AS grade_points,
SUM(number_of_credits_the_module_is_worth)
AS course_credits
FROM
addNumericalEquivalentToGradeColumn
GROUP BY student_id, group_ids_together'
workOutTheGP <- sqldf(expression)
# --
# -- Creation of the new column that works out the cumulative GPA
expression <-
'SELECT
student_id,
ROUND(SUM(grade_points) / SUM(course_credits), 2)
AS cumulative_gpa
FROM
workOutTheGP
GROUP BY student_id'
workOutTheCGPA <- sqldf(expression)
# --
# -- Merging of the OG table with the new grades that student got for the module
subsetOfAddAGradeColumnBasedOnTheNewAssessmentWeighting <- addAGradeColumnBasedOnTheNewAssessmentWeighting
OULADDataCleaner$setDataset(subsetOfAddAGradeColumnBasedOnTheNewAssessmentWeighting)
OULADDataCleaner$removeJunkColumns(c(4,5,6,7))
subsetOfAddAGradeColumnBasedOnTheNewAssessmentWeighting <- OULADDataCleaner$returnDataset()
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <-
left_join(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
subsetOfAddAGradeColumnBasedOnTheNewAssessmentWeighting,
by = join_by(
"student_id" == "student_id",
"module_id" == "module_id",
"presentation_id" == "presentation_id"
)
)
# --
# -- Prepare a mini-table for exporting
studentModulePresentationGradeTable <- addAGradeColumnBasedOnTheNewAssessmentWeighting
view(studentModulePresentationGradeTable)
studentModulePresentationGradeTable <- addAGradeColumnBasedOnTheNewAssessmentWeighting
OULADDataCleaner$setDataset(studentModulePresentationGradeTable)
OULADDataCleaner$removeJunkColumns(c(2, 3, 5, 6, 7, 8, 9))
studentModulePresentationGradeTable <- OULADDataCleaner$returnDataset()
# -- Creation of a new column that converts the grade to it's numerical equivalent
studentModulePresentationGradeTable <-
studentModulePresentationGradeTable %>%
mutate(numerical_grade_equivalent = (
grade = case_when(
grade == "HD" ~ 7,
grade == "D" ~ 6,
grade == "Cr" ~ 5,
grade == "P" ~ 4,
grade == "F" ~ 1.5,
grade == "WF" ~ NA
)
),
.after = grade)
# --
view(studentModulePresentationGradeTable)
OULADDataExporter$setDataset(studentModulePresentationGradeTable)
OULADDataExporter$writeToCsvFile("studentModulePresentationGradeTable.csv")
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
whichModuleAndPresentationCombinationIsEasiestAndHardest <- studentModulePresentationGradeTable %>%
group_by(group_ids_together) %>%
summarize(median = median(numerical_grade_equivalent),
mean = mean(functionToProcessFactor(numerical_grade_equivalent)))
whichModuleAndPresentationCombinationIsEasiestAndHardest <- studentModulePresentationGradeTable %>%
group_by(group_ids_together) %>%
summarize(median = median(numerical_grade_equivalent),
mean = mean(numerical_grade_equivalent))
view(whichModuleAndPresentationCombinationIsEasiestAndHardest)
view(studentModulePresentationGradeTable)
whichModuleAndPresentationCombinationIsEasiestAndHardest <- studentModulePresentationGradeTable %>%
group_by(group_ids_together) %>%
summarize(median = median(numerical_grade_equivalent, na.rm = TRUE),
mean = mean(numerical_grade_equivalent, na.rm = TRUE))
view(whichModuleAndPresentationCombinationIsEasiestAndHardest)
view(studentCumulativeGPAsTable)
filterForStudentsWithGPAHigherThan4.5 <- studentCumulativeGPAsTable %>% filter(cumulative_gpa >= 4.5)
view(filterForStudentsWithGPAHigherThan4.5)
countNumberOfStudentsWithHighEnoughGPA <- filterForStudentsWithGPAHigherThan4.5 %>% count(cumulative_gpa)
view(countNumberOfStudentsWithHighEnoughGPA)
countNumberOfStudentsWithHighEnoughGPA <- filterForStudentsWithGPAHigherThan4.5 %>% count(cumulative_gpa)
view(countNumberOfStudentsWithHighEnoughGPA)
view(filterForStudentsWithGPAHigherThan4.5)
countNumberOfStudentsWithHighEnoughGPA <- filterForStudentsWithGPAHigherThan4.5 %>% count()
view(countNumberOfStudentsWithHighEnoughGPA)
view(filterForStudentsWithGPAHigherThan4.5)
nrow(studentCumulativeGPAsTable)
thePercentage <- countNumberOfStudentsWithHighEnoughGPA / totalRows
totalRows <- nrow(studentCumulativeGPAsTable)
thePercentage <- countNumberOfStudentsWithHighEnoughGPA / totalRows
thePercentage
thePercentage <- (countNumberOfStudentsWithHighEnoughGPA / totalRows) * 100
thePercentage
view(studentCourseAssessmentInfoTables)
numberOfWithdrawalsByIMDBand <- studentCourseAssessmentInfoTables %>%
group_by(index_of_multiple_deprivation_for_a_uk_region) %>% count(did_student_finish_the_course)
view(numberOfWithdrawalsByIMDBand)
numberOfWithdrawalsByIMDBand <- studentCourseAssessmentInfoTables %>%
group_by(index_of_multiple_deprivation_for_a_uk_region) %>%
summarise(
launches = n(),
student_did_not_finish_the_course = sum(did_student_finish_the_course == "No")
)
view(numberOfWithdrawalsByIMDBand)
numberOfWithdrawalsByIMDBand <- studentCourseAssessmentInfoTables %>%
group_by(index_of_multiple_deprivation_for_a_uk_region) %>%
summarise(
student_did_not_finish_the_course = sum(did_student_finish_the_course == "No"),
percentage_of_total = ((sum(did_student_finish_the_course == "No")) /  n()) * 100
)
view(numberOfWithdrawalsByIMDBand)
view(studentCourseAssessmentInfoTables)
numberOfWithdrawalsByIMDBand <- studentCourseAssessmentInfoTables %>%
group_by(student_id) %>%
summarise(
student_did_not_finish_the_course = sum(did_student_finish_the_course == "No"),
percentage_of_total = ((sum(did_student_finish_the_course == "No")) /  n()) * 100
)
view(numberOfWithdrawalsByIMDBand)
view(studentCourseAssessmentInfoTables)
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_1_setup.R", sep = ""))
# --
# -- Cleanup operations for the studentAssessmentTable in the OULAD database
# Replace missing scores in student assessment table with 0
OULADDataCleaner$setDataset(studentAssessmentTable)
OULADDataCleaner$replaceMissingValueWithAValue(5, 0)
studentAssessmentTable <- OULADDataCleaner$returnDataset()
# Change 0/1 values in the student assessment table to No/Yes for if result is transferred from a previous presentation
OULADDataCleaner$setDataset(studentAssessmentTable)
OULADDataCleaner$replaceValuesEqualToXWithAValueAndNotEqualToXWithAnotherValue(4, 1, 'Yes', 'No')
studentAssessmentTable <- OULADDataCleaner$returnDataset()
# --
# -- Cleanup operations for the studentInfoTable in the OULAD database
# Handle wrongly entered age value (55<= should be >55)
OULADDataCleaner$setDataset(studentInfoTable)
OULADDataCleaner$replaceValuesEqualToXWithAValue(8, '55<=', ">55")
studentInfoTable <- OULADDataCleaner$returnDataset()
# Handle poorly entered qualification levels
OULADDataCleaner$setDataset(studentInfoTable)
OULADDataCleaner$replaceValuesEqualToXWithAValue(6, 'No Formal quals', "No recognized qualifications")
studentInfoTable <- OULADDataCleaner$returnDataset()
# Handle wrongly entered IMD band value ('10-20' value is missing a % sign, it should be '10-20%')
OULADDataCleaner$setDataset(studentInfoTable)
OULADDataCleaner$replaceValuesEqualToXWithAValue(7, '10-20', "10-20%")
studentInfoTable <- OULADDataCleaner$returnDataset()
# Handle missing IMD band values
OULADDataChecker$setDataset(studentInfoTable)
OULADDataChecker$calculateWhatUniqueValuesWeHaveInAColumn(7)
whatUniqueValuesWeHaveInIMDBand <-
OULADDataChecker$returnWhatUniqueValuesWeHaveInAColumn()
# Can see that there are 'NA' values so that's what we'll be dealing with
# [1] "90-100%" "20-30%"  "30-40%"  "50-60%"  "80-90%"  "70-80%"  NA        "60-70%"  "40-50%"  "10-20%"  "0-10%"
# Return what the most common IMD band value is for ONE particular region
returnMostCommonIMDBandValue <- function(regionArg) {
ZeroToTen <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '0-10%'
),
na.rm = TRUE
)
TenToTwenty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '10-20%'
),
na.rm = TRUE
)
TwentyToThirty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '20-30%'
),
na.rm = TRUE
)
ThirtyToFourty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '30-40%'
),
na.rm = TRUE
)
FourtyToFifty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '40-50%'
),
na.rm = TRUE
)
FiftyToSixty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '50-60%'
),
na.rm = TRUE
)
SixtyToSeventy <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '60-70%'
),
na.rm = TRUE
)
SeventyToEighty <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '70-80%'
),
na.rm = TRUE
)
EightyToNinety <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '90-100%'
),
na.rm = TRUE
)
NinetyToHundred <-
sum(
str_count(
regionArg$index_of_multiple_deprivation_for_a_uk_region,
pattern = '0-10%'
),
na.rm = TRUE
)
AllTheValues <-
c(
ZeroToTen,
TenToTwenty,
TwentyToThirty,
ThirtyToFourty,
FourtyToFifty,
FiftyToSixty,
SixtyToSeventy,
SeventyToEighty,
EightyToNinety,
NinetyToHundred
)
theBiggestOne <- which.max(AllTheValues)
returnValue <- switch(
theBiggestOne,
'0-10%',
'10-20%',
'20-30%',
'30-40%',
'40-50%',
'50-60%',
'60-70%',
'70-80%',
'80-90%',
'90-100%'
)
return(returnValue)
}
# Return a list of the most common IMD values for A LIST OF regions
returnMostCommonIMDValuesForAListOfRegions <-
function(tableArg, regionsArg, numberOfRegionsArg) {
whatIsMostCommonOne = 0
for (x in 1:numberOfRegionsArg) {
currentRegion <-
filter(tableArg,
region_student_lived_in_while_taking_the_module == regionsArg[x])
whatIsMostCommonOne[x] <-
returnMostCommonIMDBandValue(currentRegion)
}
return(whatIsMostCommonOne)
}
# Get just the studentInfoTable with the columns of interest to us
subsetOfStudentInfoTable <-
select(
studentInfoTable,
student_id,
region_student_lived_in_while_taking_the_module,
index_of_multiple_deprivation_for_a_uk_region
)
# Get just the subsetOfStudentInfoTable with the regions that have missing values for the IMD value
whichRegionsHaveAMissingValue <-
subset(
subsetOfStudentInfoTable,
is.na(
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
)
)
# Get the names of the regions that have missing values for the IMD value
OULADDataChecker$setDataset(whichRegionsHaveAMissingValue)
OULADDataChecker$calculateWhatUniqueValuesWeHaveInAColumn(2)
whatAreTheNamesOfTheseRegions <-
OULADDataChecker$returnWhatUniqueValuesWeHaveInAColumn()
# Get the number of regions that have missing values for the IMD value
whatIsTheNumberOfTheseRegions = length(whatAreTheNamesOfTheseRegions[[1]])
# Get the common IMD value for regions that have missing values for the IMD value
mostCommonOnes <-
returnMostCommonIMDValuesForAListOfRegions(
subsetOfStudentInfoTable,
whatAreTheNamesOfTheseRegions[[1]],
whatIsTheNumberOfTheseRegions
)
names(mostCommonOnes) <- whatAreTheNamesOfTheseRegions[[1]]
# Replace missing IMD values with the name of the region
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region <-
ifelse(
is.na(
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
),
subsetOfStudentInfoTable$region_student_lived_in_while_taking_the_module,
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
)
# Replace the names of the region with the most common IMD value in that region
for (i in 1:nrow(subsetOfStudentInfoTable)) {
currentValue <-
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region[i]
if (currentValue %in% names(mostCommonOnes)) {
indexValue <- which(currentValue == names(mostCommonOnes))
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region[i] <-
mostCommonOnes[indexValue]
}
}
# Replacing NA values in our studentInfoTable with values in our subsetOfStudentInfoTable
# that now contain some IMD values we've come up with
studentInfoTable$index_of_multiple_deprivation_for_a_uk_region <-
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
# --
# -- Cleanup operations for the studentRegistrationTable in the OULAD database
# Clarify that if the date the student unregistered field is empty then this means that
# either the student is still in the course or has completed the course
studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day <-
replace(
studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day,
is.na(
studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day
),
"In/Completed course"
)
# Make it so if the day the student registered into the course is missing, it is on the day the course started
studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day <-
replace(
studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day,
is.na(
studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day
),
0
)
# --
# -- Data checking
# Checking for duplicate IDs for PKs
# Worked out PKs through looking at the tables
OULADDataChecker$setDataset(assessmentsTable)
OULADDataChecker$checkForDuplicateValues(3) # assessment_id
wereDuplicateAssessmentIDsFound <-
OULADDataChecker$returnIfDuplicateValuesWereFound()
OULADDataChecker$setDataset(VLETable)
OULADDataChecker$checkForDuplicateValues(1) # vle_material_id
wereDuplicateVLEMaterialIDsFound <-
OULADDataChecker$returnIfDuplicateValuesWereFound()
OULADDataChecker$calculateNumberOfMissingValues()
wereMissingValuesFound <-
OULADDataChecker$returnNumberOfMissingValues()
# courses table and student info table have duplicates, no PK in them
# --
# Drop columns with lots of missing values
OULADDataCleaner$setDataset(VLETable)
OULADDataCleaner$removeJunkColumns(c(5, 6))
VLETable <- OULADDataCleaner$returnDataset()
# --
numberOfWithdrawalsByIMDBand <- studentInfoTable %>%
group_by(index_of_multiple_deprivation_for_a_uk_region) %>%
summarise(
student_did_not_finish_the_course = sum(did_student_finish_the_course == "No"),
percentage_of_total = ((sum(did_student_finish_the_course == "No")) /  n()) * 100
)
view(studentInfoTable)
numberOfWithdrawalsByIMDBand <- studentInfoTable %>%
group_by(index_of_multiple_deprivation_for_a_uk_region) %>%
summarise(
student_did_not_finish_the_course = sum(student_final_result_for_the_module == "Withdrawn"),
percentage_of_total = ((sum(student_final_result_for_the_module == "Withdrawn")) /  n()) * 100
)
view(numberOfWithdrawalsByIMDBand)
distinctStudentIDS <- studentInfoTable %>% distinct(student_id)
view(distinctStudentIDS)
view(studentInfoTable)
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
distinctStudentIDS <- studentCourseAssessmentInfoTables %>% select(distinct(student_id), index_of_multiple_deprivation_for_a_uk_region, did_student_finish_the_course)
distinctStudentIDS <- studentCourseAssessmentInfoTables %>% select(distinct(student_id), index_of_multiple_deprivation_for_a_uk_region, did_student_finish_the_course)
view(studentCourseAssessmentInfoTables)
distinctStudentIDS <- studentCourseAssessmentInfoTables %>% select(distinct(student_id), index_of_multiple_deprivation_for_a_uk_region, did_student_finish_the_course)
distinctStudentIDS <- studentCourseAssessmentInfoTables %>% select(student_id, index_of_multiple_deprivation_for_a_uk_region, did_student_finish_the_course)
view(distinctStudentIDS)
distinctStudentIDS <- studentCourseAssessmentInfoTables %>%  group_by(student_id) %>% select(student_id, index_of_multiple_deprivation_for_a_uk_region, did_student_finish_the_course)
view(distinctStudentIDS)
distinctStudentIDS <- studentCourseAssessmentInfoTables %>%  distinct(student_id) %>% select(student_id, index_of_multiple_deprivation_for_a_uk_region, did_student_finish_the_course)
distinctStudentIDS <- studentCourseAssessmentInfoTables %>%  select(student_id, index_of_multiple_deprivation_for_a_uk_region, did_student_finish_the_course) %>%  group_by(student_id)
view(distinctStudentIDS)
distinctStudentIDS <- studentCourseAssessmentInfoTables %>%  distinct(student_id, index_of_multiple_deprivation_for_a_uk_region, did_student_finish_the_course)
view(distinctStudentIDS)
numberOfWithdrawalsByIMDBand <- distinctStudentIDS %>%
group_by(index_of_multiple_deprivation_for_a_uk_region) %>%
summarise(
student_did_not_finish_the_course = sum(did_student_finish_the_course == "No"),
percentage_of_total = ((sum(did_student_finish_the_course == "No")) /  n()) * 100
)
view(numberOfWithdrawalsByIMDBand)
numberOfWithdrawalsByIMDBand <- distinctStudentIDS %>%
group_by(index_of_multiple_deprivation_for_a_uk_region) %>%
summarise(
number_of_students_that_did_not_finish_the_course = sum(did_student_finish_the_course == "No"),
percentage_of_total = ((sum(did_student_finish_the_course == "No")) /  n()) * 100
)
view(numberOfWithdrawalsByIMDBand)
# --
numberOfWithdrawalsByIMDBand <- distinctStudentIDS %>%
group_by(index_of_multiple_deprivation_for_a_uk_region) %>%
summarise(
total_students_that_withdrew = sum(did_student_finish_the_course == "No"),
percentage_of_total = ((sum(did_student_finish_the_course == "No")) /  n()) * 100
)
view(numberOfWithdrawalsByIMDBand)
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# What files I share between both R project files
# -- Make sure it searches from directory of "oalad_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_part_2_setup.R", sep = ""))
# --
OULADDataChecker$setDataset(studentCourseAssessmentInfoTables)
OULADDataChecker$getDataTypesOfDataset()
