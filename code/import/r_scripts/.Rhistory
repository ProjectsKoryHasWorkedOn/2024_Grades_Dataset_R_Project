whatAreTheNamesOfTheseRegions[2]
whatAreTheNamesOfTheseRegions[[1]]
source("C:/Users/Certa/Desktop/projects/individual_project_r/oulad_dataset_code_part_1.R", echo=TRUE)
mostCommonOnes
mostCommonOnes <- returnMostCommonIMDValuesForAListOfRegions(subsetOfStudentInfoTable, whatAreTheNamesOfTheseRegions, whatIsTheNumberOfTheseRegions)
mostCommonOnes <- returnMostCommonIMDValuesForAListOfRegions(subsetOfStudentInfoTable, whatAreTheNamesOfTheseRegions[[1]], whatIsTheNumberOfTheseRegions)
names(mostCommonOnes) <- whatAreTheNamesOfTheseRegions[[1]]
mostCommonOnes
wereDuplicateStudentIDsFound
OULADDataAnalyzer$setDataset(VLETable)
OULADDataAnalyzer$checkForDuplicateValues(1) # vle_material_id
wereDuplicateVLEMaterialIDsFound <- OULADDataAnalyzer$returnIfDuplicateValuesWereFound()
wereDuplicateVLEMaterialIDsFound
OULADDataAnalyzer$setDataset(studentInfoTable)
OULADDataAnalyzer$checkForDuplicateValues(3) # student_id
wereDuplicateStudentIDsFound <- OULADDataAnalyzer$returnIfDuplicateValuesWereFound()
wereDuplicateStudentIDsFound
source("C:/Users/Certa/Desktop/projects/individual_project_r/oulad_dataset_code_part_1.R", echo=TRUE)
wereDuplicateStudentIDsFound
OULADDataAnalyzer$setDataset(studentInfoTable)
OULADDataAnalyzer$checkForDuplicateValues(3) # student_id
wereDuplicateStudentIDsFound <- OULADDataAnalyzer$returnIfDuplicateValuesWereFound()
view(studentInfoTable)
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_run_once_setup.R", sep = ""))
# --
# -- Cleanup operations for the studentAssessmentTable in the OULAD database
# Replace missing scores in student assessment table with 0
OULADDataTransformer$setDataset(studentAssessmentTable)
OULADDataTransformer$replaceMissingValueWithAValue(5, 0)
studentAssessmentTable <- OULADDataTransformer$returnDataset()
# Change 0/1 values in the student assessment table to No/Yes for if result is transferred from a previous presentation
OULADDataTransformer$setDataset(studentAssessmentTable)
OULADDataTransformer$replaceValuesEqualToXWithAValueAndNotEqualToXWithAnotherValue(4, 1, 'Yes', 'No')
studentAssessmentTable <- OULADDataTransformer$returnDataset()
# See if those changes worked
# view(studentAssessmentTable)
# --
# -- Cleanup operations for the studentInfoTable in the OULAD database
# Handle wrongly entered age value (55<= should be >55)
OULADDataTransformer$setDataset(studentInfoTable)
OULADDataTransformer$replaceValuesEqualToXWithAValue(8, '55<=', ">55")
studentInfoTable <- OULADDataTransformer$returnDataset()
# Handle wrongly entered IMD band value (missing % sign for 10-20)
OULADDataTransformer$setDataset(studentInfoTable)
OULADDataTransformer$replaceValuesEqualToXWithAValue(7, '10-20', "10-20%")
studentInfoTable <- OULADDataTransformer$returnDataset()
# Handle missing IMD band values
OULADDataAnalyzer$setDataset(studentInfoTable)
OULADDataAnalyzer$calculateWhatUniqueValuesWeHaveInAColumn(7)
whatUniqueValuesWeHaveInIMDBand <- OULADDataAnalyzer$returnWhatUniqueValuesWeHaveInAColumn()
# Get a list of what unique values we have for the IMD band values
# [1] "90-100%" "20-30%"  "30-40%"  "50-60%"  "80-90%"  "70-80%"  NA        "60-70%"  "40-50%"  "10-20%"  "0-10%"
# Return what the most common IMD band value is for ONE particular region
returnMostCommonIMDBandValue <- function(regionArg) {
ZeroToTen <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '0-10%'), na.rm = TRUE)
TenToTwenty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '10-20%'), na.rm = TRUE)
TwentyToThirty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '20-30%'), na.rm = TRUE)
ThirtyToFourty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '30-40%'), na.rm = TRUE)
FourtyToFifty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '40-50%'), na.rm = TRUE)
FiftyToSixty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '50-60%'), na.rm = TRUE)
SixtyToSeventy <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '60-70%'), na.rm = TRUE)
SeventyToEighty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '70-80%'), na.rm = TRUE)
EightyToNinety <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '90-100%'), na.rm = TRUE)
NinetyToHundred <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '0-10%'), na.rm = TRUE)
AllTheValues <- c(ZeroToTen, TenToTwenty, TwentyToThirty, ThirtyToFourty, FourtyToFifty, FiftyToSixty, SixtyToSeventy, SeventyToEighty, EightyToNinety, NinetyToHundred)
theBiggestOne <- which.max(AllTheValues)
returnValue <- switch(theBiggestOne,
'0-10%',
'10-20%',
'20-30%',
'30-40%',
'40-50%',
'50-60%',
'60-70%',
'70-80%',
'80-90%',
'90-100%')
return(returnValue)
}
# Return a list of the most common IMD values for A LIST OF regions
returnMostCommonIMDValuesForAListOfRegions <- function(tableArg, regionsArg, numberOfRegionsArg){
whatIsMostCommonOne = 0
for(x in 1:numberOfRegionsArg){
currentRegion <- filter(tableArg, region_student_lived_in_while_taking_the_module == regionsArg[x])
whatIsMostCommonOne[x] <- returnMostCommonIMDBandValue(currentRegion)
}
return(whatIsMostCommonOne)
}
# Get just the studentInfoTable with the columns of interest to us
subsetOfStudentInfoTable <- select(studentInfoTable, student_id, region_student_lived_in_while_taking_the_module, index_of_multiple_deprivation_for_a_uk_region)
# view(subsetOfStudentInfoTable)
# Get just the subsetOfStudentInfoTable with the regions that have missing values for the IMD value
whichRegionsHaveAMissingValue <- subset(subsetOfStudentInfoTable, is.na(subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region))
# view(whichRegionsHaveAMissingValue)
# Get the names of the regions that have missing values for the IMD value
OULADDataAnalyzer$setDataset(whichRegionsHaveAMissingValue)
OULADDataAnalyzer$calculateWhatUniqueValuesWeHaveInAColumn(2)
whatAreTheNamesOfTheseRegions <- OULADDataAnalyzer$returnWhatUniqueValuesWeHaveInAColumn()
# Get the number of regions that have missing values for the IMD value
whatIsTheNumberOfTheseRegions = length(whatAreTheNamesOfTheseRegions[[1]])
# Get the common IMD value for regions that have missing values for the IMD value
mostCommonOnes <- returnMostCommonIMDValuesForAListOfRegions(subsetOfStudentInfoTable, whatAreTheNamesOfTheseRegions[[1]], whatIsTheNumberOfTheseRegions)
names(mostCommonOnes) <- whatAreTheNamesOfTheseRegions[[1]]
# Replace missing IMD values with the name of the region
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region <- ifelse(is.na(subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region), subsetOfStudentInfoTable$region_student_lived_in_while_taking_the_module, subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region)
# view(subsetOfStudentInfoTable)
# Replace the names of the region with the most common IMD value in that region
for(i in 1:nrow(subsetOfStudentInfoTable)){
currentValue <- subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region[i]
if(currentValue %in% names(mostCommonOnes)){
indexValue <- which(currentValue == names(mostCommonOnes))
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region[i] <- mostCommonOnes[indexValue]
}
}
# view(subsetOfStudentInfoTable)
# Replacing NA values in our studentInfoTable with values in our subsetOfStudentInfoTable that now contain some IMD values we've come up with
studentInfoTable$index_of_multiple_deprivation_for_a_uk_region <- subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
# See if those changes worked
# view(studentInfoTable)
# --
# -- Cleanup operations for the studentRegistrationTable in the OULAD database
# Clarify that if the date the student unregistered field is empty then this means that either the student is still in the course or has completed the course
studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day <- replace(studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day, is.na(studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day), "In/Completed course")
# Make it so if the day the student registered into the course is missing, it is on the day the course started
studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day <- replace(studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day, is.na(studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day), 0)
# See if those changes worked
# view(studentRegistrationTable)
# --
# -- Data analysis
view(studentInfoTable)
view(studentRegistrationTable)
view(coursesTable)
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
# What I've done to the OULAD dataset
# -- Data wrangling and transformation
source(file = paste(getwd(), "/import/r_scripts/r_oulad_run_once_setup.R", sep = ""))
# --
# -- Cleanup operations for the studentAssessmentTable in the OULAD database
# Replace missing scores in student assessment table with 0
OULADDataTransformer$setDataset(studentAssessmentTable)
OULADDataTransformer$replaceMissingValueWithAValue(5, 0)
studentAssessmentTable <- OULADDataTransformer$returnDataset()
# Change 0/1 values in the student assessment table to No/Yes for if result is transferred from a previous presentation
OULADDataTransformer$setDataset(studentAssessmentTable)
OULADDataTransformer$replaceValuesEqualToXWithAValueAndNotEqualToXWithAnotherValue(4, 1, 'Yes', 'No')
studentAssessmentTable <- OULADDataTransformer$returnDataset()
# See if those changes worked
# view(studentAssessmentTable)
# --
# -- Cleanup operations for the studentInfoTable in the OULAD database
# Handle wrongly entered age value (55<= should be >55)
OULADDataTransformer$setDataset(studentInfoTable)
OULADDataTransformer$replaceValuesEqualToXWithAValue(8, '55<=', ">55")
studentInfoTable <- OULADDataTransformer$returnDataset()
# Handle wrongly entered IMD band value (missing % sign for 10-20)
OULADDataTransformer$setDataset(studentInfoTable)
OULADDataTransformer$replaceValuesEqualToXWithAValue(7, '10-20', "10-20%")
studentInfoTable <- OULADDataTransformer$returnDataset()
# Handle missing IMD band values
OULADDataAnalyzer$setDataset(studentInfoTable)
OULADDataAnalyzer$calculateWhatUniqueValuesWeHaveInAColumn(7)
whatUniqueValuesWeHaveInIMDBand <- OULADDataAnalyzer$returnWhatUniqueValuesWeHaveInAColumn()
# Get a list of what unique values we have for the IMD band values
# [1] "90-100%" "20-30%"  "30-40%"  "50-60%"  "80-90%"  "70-80%"  NA        "60-70%"  "40-50%"  "10-20%"  "0-10%"
# Return what the most common IMD band value is for ONE particular region
returnMostCommonIMDBandValue <- function(regionArg) {
ZeroToTen <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '0-10%'), na.rm = TRUE)
TenToTwenty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '10-20%'), na.rm = TRUE)
TwentyToThirty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '20-30%'), na.rm = TRUE)
ThirtyToFourty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '30-40%'), na.rm = TRUE)
FourtyToFifty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '40-50%'), na.rm = TRUE)
FiftyToSixty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '50-60%'), na.rm = TRUE)
SixtyToSeventy <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '60-70%'), na.rm = TRUE)
SeventyToEighty <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '70-80%'), na.rm = TRUE)
EightyToNinety <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '90-100%'), na.rm = TRUE)
NinetyToHundred <- sum(str_count(regionArg$index_of_multiple_deprivation_for_a_uk_region, pattern = '0-10%'), na.rm = TRUE)
AllTheValues <- c(ZeroToTen, TenToTwenty, TwentyToThirty, ThirtyToFourty, FourtyToFifty, FiftyToSixty, SixtyToSeventy, SeventyToEighty, EightyToNinety, NinetyToHundred)
theBiggestOne <- which.max(AllTheValues)
returnValue <- switch(theBiggestOne,
'0-10%',
'10-20%',
'20-30%',
'30-40%',
'40-50%',
'50-60%',
'60-70%',
'70-80%',
'80-90%',
'90-100%')
return(returnValue)
}
# Return a list of the most common IMD values for A LIST OF regions
returnMostCommonIMDValuesForAListOfRegions <- function(tableArg, regionsArg, numberOfRegionsArg){
whatIsMostCommonOne = 0
for(x in 1:numberOfRegionsArg){
currentRegion <- filter(tableArg, region_student_lived_in_while_taking_the_module == regionsArg[x])
whatIsMostCommonOne[x] <- returnMostCommonIMDBandValue(currentRegion)
}
return(whatIsMostCommonOne)
}
# Get just the studentInfoTable with the columns of interest to us
subsetOfStudentInfoTable <- select(studentInfoTable, student_id, region_student_lived_in_while_taking_the_module, index_of_multiple_deprivation_for_a_uk_region)
# view(subsetOfStudentInfoTable)
# Get just the subsetOfStudentInfoTable with the regions that have missing values for the IMD value
whichRegionsHaveAMissingValue <- subset(subsetOfStudentInfoTable, is.na(subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region))
# view(whichRegionsHaveAMissingValue)
# Get the names of the regions that have missing values for the IMD value
OULADDataAnalyzer$setDataset(whichRegionsHaveAMissingValue)
OULADDataAnalyzer$calculateWhatUniqueValuesWeHaveInAColumn(2)
whatAreTheNamesOfTheseRegions <- OULADDataAnalyzer$returnWhatUniqueValuesWeHaveInAColumn()
# Get the number of regions that have missing values for the IMD value
whatIsTheNumberOfTheseRegions = length(whatAreTheNamesOfTheseRegions[[1]])
# Get the common IMD value for regions that have missing values for the IMD value
mostCommonOnes <- returnMostCommonIMDValuesForAListOfRegions(subsetOfStudentInfoTable, whatAreTheNamesOfTheseRegions[[1]], whatIsTheNumberOfTheseRegions)
names(mostCommonOnes) <- whatAreTheNamesOfTheseRegions[[1]]
# Replace missing IMD values with the name of the region
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region <- ifelse(is.na(subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region), subsetOfStudentInfoTable$region_student_lived_in_while_taking_the_module, subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region)
# view(subsetOfStudentInfoTable)
# Replace the names of the region with the most common IMD value in that region
for(i in 1:nrow(subsetOfStudentInfoTable)){
currentValue <- subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region[i]
if(currentValue %in% names(mostCommonOnes)){
indexValue <- which(currentValue == names(mostCommonOnes))
subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region[i] <- mostCommonOnes[indexValue]
}
}
# view(subsetOfStudentInfoTable)
# Replacing NA values in our studentInfoTable with values in our subsetOfStudentInfoTable that now contain some IMD values we've come up with
studentInfoTable$index_of_multiple_deprivation_for_a_uk_region <- subsetOfStudentInfoTable$index_of_multiple_deprivation_for_a_uk_region
# See if those changes worked
# view(studentInfoTable)
# --
# -- Cleanup operations for the studentRegistrationTable in the OULAD database
# Clarify that if the date the student unregistered field is empty then this means that either the student is still in the course or has completed the course
studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day <- replace(studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day, is.na(studentRegistrationTable$student_days_it_took_them_to_unregister_relative_to_the_module_starting_day), "In/Completed course")
# Make it so if the day the student registered into the course is missing, it is on the day the course started
studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day <- replace(studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day, is.na(studentRegistrationTable$student_days_it_took_them_to_register_relative_to_the_module_starting_day), 0)
# See if those changes worked
# view(studentRegistrationTable)
# --
# -- Data analysis
view(studentInfoTable)
view(coursesTable)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
output <- mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>% distinct(student_id, assessment_id, presentation_id, module_id, .keep_all = T)
output
output <- mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>% distinct(student_id, assessment_id, presentation_id, module_id, .keep_all = T)
output
output <- mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>% distinct(student_id, assessment_id, presentation_id, module_id, .keep_all = T)
view(output)
output <- group_by(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable, student_id, assessment_id, presentation_id, module_id) %>% filter(n() > 1)
view(output)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable  %>% add_row(module_id = "AAA", presentation_id = "2013J",
student_id = 704156, assessment_id = 1752,
student_days_it_took_to_submit_assessment = 18,
assessment_result_same_as_previous_attempt = "No",
student_score = 67,
assessment_type = "TMA",
assessment_days_since_the_module_began_due_date = 19,
assessment_weight = 10,
student_days_it_took_them_to_register_relative_to_the_module_starting_day = -29,
student_days_it_took_them_to_unregister_relative_to_the_module_starting_day = "In/Completed course"
gender = "M",
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable  %>% add_row(module_id = "AAA", presentation_id = "2013J",
student_id = 704156, assessment_id = 1752,
student_days_it_took_to_submit_assessment = 18,
assessment_result_same_as_previous_attempt = "No",
student_score = 67,
assessment_type = "TMA",
assessment_days_since_the_module_began_due_date = 19,
assessment_weight = 10,
student_days_it_took_them_to_register_relative_to_the_module_starting_day = -29,
student_days_it_took_them_to_unregister_relative_to_the_module_starting_day = "In/Completed course",
gender = "M",
region_student_lived_in_while_taking_the_module = "South Region",
student_highest_education_level_on_entry_to_the_module = "HE Qualification",
index_of_multiple_deprivation_for_a_uk_region = "90-100%"
student_age = ">55",
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable  %>% add_row(module_id = "AAA", presentation_id = "2013J",
student_id = 704156, assessment_id = 1752,
student_days_it_took_to_submit_assessment = 18,
assessment_result_same_as_previous_attempt = "No",
student_score = 67,
assessment_type = "TMA",
assessment_days_since_the_module_began_due_date = 19,
assessment_weight = 10,
student_days_it_took_them_to_register_relative_to_the_module_starting_day = -29,
student_days_it_took_them_to_unregister_relative_to_the_module_starting_day = "In/Completed course",
gender = "M",
region_student_lived_in_while_taking_the_module = "South Region",
student_highest_education_level_on_entry_to_the_module = "HE Qualification",
index_of_multiple_deprivation_for_a_uk_region = "90-100%",
student_age = ">55",
number_of_times_the_student_has_attempted_this_module = 0,
number_of_credits_the_module_is_worth = 120,
student_has_a_disability = "N",
student_final_result_for_the_module = "Pass",
module_days_it_goes_for = 268
)
output <- group_by(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable, student_id, assessment_id, presentation_id, module_id) %>% filter(n() > 1)
view(output)
source("C:/Users/Certa/Desktop/projects/individual_project_r/oulad_dataset_code_part_1.R", echo=TRUE)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable  %>% add_row(module_id = "AAA", presentation_id = "2013J",
student_id = 704156, assessment_id = 1752,
student_days_it_took_to_submit_assessment = 18,
assessment_result_same_as_previous_attempt = "No",
student_score = 67,
assessment_type = "TMA",
assessment_days_since_the_module_began_due_date = 20,
assessment_weight = 11,
student_days_it_took_them_to_register_relative_to_the_module_starting_day = -18,
student_days_it_took_them_to_unregister_relative_to_the_module_starting_day = "In/Completed course",
gender = "M",
region_student_lived_in_while_taking_the_module = "Ireland",
student_highest_education_level_on_entry_to_the_module = "HE Qualification",
index_of_multiple_deprivation_for_a_uk_region = "90-100%",
student_age = ">55",
number_of_times_the_student_has_attempted_this_module = 0,
number_of_credits_the_module_is_worth = 120,
student_has_a_disability = "N",
student_final_result_for_the_module = "Fail",
module_days_it_goes_for = 168
)
source("C:/Users/Certa/Desktop/projects/individual_project_r/oulad_dataset_code_part_1.R", echo=TRUE)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>% add_row(
module_id = "AAA",
presentation_id = "2013J",
student_id = 704156,
assessment_id = 1752,
student_days_it_took_to_submit_assessment = 18,
assessment_result_same_as_previous_attempt = "No",
student_score = 67,
assessment_type = "TMA",
assessment_days_since_the_module_began_due_date = 20,
assessment_weight = 11,
student_days_it_took_them_to_register_relative_to_the_module_starting_day = -18,
student_days_it_took_them_to_unregister_relative_to_the_module_starting_day = "In/Completed course",
gender = "M",
region_student_lived_in_while_taking_the_module = "Ireland",
student_highest_education_level_on_entry_to_the_module = "HE Qualification",
index_of_multiple_deprivation_for_a_uk_region = "90-100%",
student_age = ">55",
number_of_times_the_student_has_attempted_this_module = 0,
number_of_credits_the_module_is_worth = 120,
student_has_a_disability = "N",
student_final_result_for_the_module = "Fail",
module_days_it_goes_for = 168
)
source("C:/Users/Certa/Desktop/projects/individual_project_r/oulad_dataset_code_part_1.R", echo=TRUE)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <- rbind(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable, list("AAA", "2013J", 704156, 1752, 18, "No", 67, "TMA", 20, 11, -18, "In/Completed course", "M", "Ireland", "HE Qualification", "90-100%", ">55",0, 120, "N", "Fail", 168))
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
output <-
group_by(
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable,
student_id,
assessment_id,
presentation_id,
module_id
) %>% filter(n() > 1)
view(output)
numberOfRowsThatShare4IDS <- length(output)
numberOfRowsThatShare4IDS
numberOfRowsThatShare4IDS <- nrow(output)
numberOfRowsThatShare4IDS
source("C:/Users/Certa/Desktop/projects/individual_project_r/oulad_dataset_code_part_1.R", echo=TRUE)
numberOfRowsThatShare4IDS
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
select(student_score, assessment_weight) %>%
mutate(
weighted_score = ((student_score * assessment_weight)/100)
)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
select(student_score, assessment_weight) %>%
mutate(
weighted_score = ((student_score * assessment_weight)/100),
.after = assessment_weight
)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
mutate(
weighted_score = ((student_score * assessment_weight)/100),
.after = assessment_weight
)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <- mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
select(student_score, assessment_weight) %>%
mutate(
weighted_score = ((student_score * assessment_weight)/100),
.after = assessment_weight
)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable <- mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable %>%
mutate(
weighted_score = ((student_score * assessment_weight)/100),
.after = assessment_weight
)
view(mergedAssessmentTableAndStudentAssessmentTableAndStudentRegistrationTableAndStudentInfoAndCoursesTable)
source("C:/Users/Certa/Desktop/projects/individual_project_r/oulad_dataset_code_part_1.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/oulad_dataset_code_part_1.R", echo=TRUE)
view(mongoDBDataset)
view(mongoDBDataset)
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/import/r_scripts/r_mongo_db_setup.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/import/r_scripts/r_mongo_db_setup.R", echo=TRUE)
# Addition of a new column that indicates the weight of each assessment item
mongoDBDataset <- mongoDBDataset %>%
mutate(
weighted_score = (type = case_when(
type == "exam"  ~ 40,
type == "quiz"  ~ 20,
type == "homework"  ~ 20
)),
.after = score
)
view(mongoDBDataset)
mongoDBDataset <- mongoDBDataset %>%
mutate(
grade = (score = case_when(
score > 85 ~ "HD",
score < 85 & score > 74 ~ "D",
score < 75 & score > 64 ~ "Cr",
score < 65 & score > 49 ~ "P",
score < 49 ~ "F")),
.after = score
)
view(mongoDBDataset)
ggplot(mongoDBDataset) + geom_bar(aes(x = grade))
ggplot(mongoDBDataset) + geom_bar(aes(x = grade, fill = grade))
ggplot(mongoDBDataset) + geom_bar(aes(x = grade, fill = grade)) + labs( x = "Grade student received", y = "Count", title ="How students fared with the assessments")
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
MGDBDataAnalyzer$calculateMean(mongoDBDataset$score)
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
# What files I share between both R project files
# -- Make sure it searches from directory of "mongodb_dataset_main.R"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# --
# -- Import a file that installs and loads the needed libraries
source(file = paste(getwd(), "/import/r_scripts/r_libraries.R", sep = ""))
# --
# -- Import a file that incorporates the needed classes
source(file = paste(getwd(), "/import/r_scripts/r_classes.R", sep = ""))
# --
MGDBDataAnalyzer$calculateMedian(mongoDBDataset$score)
MGDBDataAnalyzer$calculateMean(mongoDBDataset$score)
source("C:/Users/Certa/Desktop/projects/individual_project_r/import/r_scripts/r_mongo_db_setup.R", echo=TRUE)
MGDBDataAnalyzer$setDataset(mongoDBDataset)
MGDBDataAnalyzer$calculateNumberOfColumns()
MGDBDataAnalyzer$calculateNumberOfRowsWithUniqueValues()
MGDBDataAnalyzer$calculateNumberOfRowsWithNonUniqueValues()
MGDBDataAnalyzer$setNamesOfRowsForNumberOfRowsVectors()
MGDBDataAnalyzer$calculateNumberOfMissingValues()
MGDBDataAnalyzer$calculateRangeOfValues(mongoDBDataset$score)
MGDBDataAnalyzer$calculateMean(mongoDBDataset$score)
MGDBDataAnalyzer$calculateMean(mongoDBDataset$score)
mean(mongoDBDataset$score)
view(mongoDBDataset$score)
mean(mongoDBDataset[[1]])
view(mongoDBDataset[3])
mean(mongoDBDataset[3])
mean(mongoDBDataset[[3]])
mean(mongoDBDataset[,3])
scores <- mongoDBDataset$score
view(scores)
mean(scores)
mean(scores[[1]])
mean(scores[1])
scores <- as.vector(mongoDBDataset$score)
mean(scores)
m_scores <- as.vector(mongoDBDataset$score)
meanOfScores <- mean(m_scores)
meanOfScores <- mean(c(1,2,5.5,6))
meanOfScores = mean(c(1,2,5.5,6))
m_scores <- as.vector(mongoDBDataset$score)
meanOfScores = mean(m_scores, trim = 0)
?mean
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
mongolite_installed <- ifelse((nchar(mongolite) == 0),FALSE,TRUE)
mongolite_installed
as.bool(mongolite_installed)
mongolite <- find.package("mongolite", quiet = TRUE)
nchar(mongolite)
length(mongolite)
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
mongolite <- find.package("mongolite", quiet = TRUE)
mongolite_installed <- is.integer0(mongolite)
mongolite_installed
source("C:/Users/Certa/Desktop/projects/individual_project_r/mongodb_dataset_code.R", echo=TRUE)
source("C:/Users/Certa/Desktop/projects/individual_project_r/import/r_scripts/r_libraries.R", echo=TRUE)
